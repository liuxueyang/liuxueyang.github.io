<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bfs on LXY Site</title>
    <link>http://liuxueyang.github.io/categories/bfs/</link>
    <description>Recent content in Bfs on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 17 May 2017 00:06:00 +0800</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/categories/bfs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Checking whether a Graph is Bipartite</title>
      <link>http://liuxueyang.github.io/posts/checking-whether-a-graph-is-bipartite/</link>
      <pubDate>Wed, 17 May 2017 00:06:00 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/checking-whether-a-graph-is-bipartite/</guid>
      <description>题目链接：pdf
题目给一个无向图，判定这个图是否是二分图。
所谓二分图就是，用可以两种颜色给这个图的所有节点染色，并且满足相邻两个点颜色不同。
思路：
模拟染色过程，遍历所有点，如果这个点没有被染色，那么用BFS从这个点开始染色，当出现两个点颜色相同，说明这个图不是二分图。如果这个点已经被染色过，那么判断一下和这个点直接相连的点和它的颜色是否相同。
// Sun May 14 21:24:26 CST 2017 // Sun May 14 21:43:44 CST 2017 /* 二分图判定 */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; using std::vector; using std::queue; int bipartite(vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; &amp;amp;adj) { int result = 1; vector&amp;lt;int&amp;gt; color(adj.</description>
    </item>
    
    <item>
      <title>Computing the Minimum Number of Flight Segments</title>
      <link>http://liuxueyang.github.io/posts/computing-minimum-number-of-flight-segments/</link>
      <pubDate>Tue, 16 May 2017 23:57:39 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/computing-minimum-number-of-flight-segments/</guid>
      <description>题目链接：pdf
给一个无向图，一个起点，一个终点，求从起点到终点的路径的边数的最小值。
就是一遍BFS。
// Sun May 14 21:01:40 CST 2017 // Sun May 14 21:20:34 CST 2017 /* 最简单的BFS */ #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;queue&amp;gt; using std::vector; using std::queue; int distance(vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; &amp;amp;adj, int s, int t) { vector&amp;lt;int&amp;gt; dist(adj.</description>
    </item>
    
  </channel>
</rss>