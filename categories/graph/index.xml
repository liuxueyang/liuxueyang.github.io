<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graph on LXY Site</title>
    <link>http://liuxueyang.github.io/categories/graph/</link>
    <description>Recent content in Graph on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 17 May 2017 15:33:49 +0800</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/categories/graph/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clustering</title>
      <link>http://liuxueyang.github.io/posts/clustering/</link>
      <pubDate>Wed, 17 May 2017 15:33:49 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/clustering/</guid>
      <description>题目链接：pdf
题目给出一个些点的坐标，要求把这些点分成k组，求这k组中，组和组之间的点 的最小距离d。
这道题，好像可以用Kruskal？比如：按照边长度从小到大扫描， 同时记录当前有多少个连通分量（比如：每次Union之后连通分量 的个数减一），一直到只剩k个连通分量的时候，找到下一个可用 边（这个边的两个点在不同的连通分量中）的时候退出循环。这个 可用边就是答案。
因为要求最小的d嘛，所以就是贪心吧。
所以相对难实现的就是这些了：</description>
    </item>
    
    <item>
      <title>Building Roads to Connect Cities</title>
      <link>http://liuxueyang.github.io/posts/building-roads-to-connect-cities/</link>
      <pubDate>Wed, 17 May 2017 15:24:43 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/building-roads-to-connect-cities/</guid>
      <description>题目链接：pdf
给出平面上的一些点，任意两点之间可以相连，求最小生成树的总权值。
用Kruskal：把所有边按照边长度升序排序，循环所有边，每次加入一个边之前要判断这个边的两个点是不是在一个集合中，如果是那么跳过，如果不是那么把这个边的两个点合并到一个集合中。集合操作用带路径压缩的并查集。循环边的过程中累加边的权值。
// Tue May 16 17:02:04 2017 // Tue May 16 20:42:10 2017 #include &amp;lt;bits/stdc++.</description>
    </item>
    
    <item>
      <title>Detecting Anomalies in Currency Exchange Rates</title>
      <link>http://liuxueyang.github.io/posts/detecting-anomalies-in-currency-exchange-rates/</link>
      <pubDate>Wed, 17 May 2017 15:01:28 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/detecting-anomalies-in-currency-exchange-rates/</guid>
      <description>题目链接：pdf
题目给一个有向图，判定这个有向图是不是存在负环。
思路：
对这个图进行Bellman-Ford算法：不断对所有边进行松弛操作，循环进行V次，如果第V次仍然有边被松弛，那么说明存在负环。
相反，如果第V次没有边被松弛，那么说明没有负环。
在讨论Dijkstra算法的时候，最开始的V*E的算法其实就是Bellman-Ford算法。
初始化的时候把dist数组初始化为0。为什么呢？因为我们找的是负环，所以我们可以假设所有点到对源点的距离都是0。如果有负环，那么一定有负边，在第V次松弛所有边的时候，这个环中一定有一个点的最短路为负值。
// Mon May 15 14:13:09 CST 2017 // Mon May 15 15:09:41 CST 2017 // 一个有向图是不是存在负环 #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;utility&amp;gt; using namespace std; typedef pair&amp;lt;int, int&amp;gt; PII;	// from, to struct edge { int from; int to; int w; }; int negative_cycle(vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; &amp;amp;adj, vector&amp;lt;vector&amp;lt;int&amp;gt; &amp;gt; &amp;amp;cost) { vector&amp;lt;int&amp;gt; dist(adj.</description>
    </item>
    
    <item>
      <title>Computing the Minimum Cost of a Flight</title>
      <link>http://liuxueyang.github.io/posts/computing-minimum-cost-of-a-flight/</link>
      <pubDate>Wed, 17 May 2017 08:37:01 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/computing-minimum-cost-of-a-flight/</guid>
      <description>题目链接：pdf
题目给出一个有向图，边的权值非负，求起点到终点的最短路。
用Dijkstra，基本思想是这样的：如果一个有向图权值非负，那么两点之间的最 短路有最优子结构的性质。两点之间的最短路上的任意两点之间的路径也是最优 的。
设S -&amp;gt; ... -&amp;gt; u -&amp;gt; .</description>
    </item>
    
    <item>
      <title>Checking Whether Any Intersection in a City is Reachable from Any Other</title>
      <link>http://liuxueyang.github.io/posts/checking-whether-any-intersection-in-a-city-is-reachable-any-other/</link>
      <pubDate>Tue, 16 May 2017 23:24:52 +0800</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/checking-whether-any-intersection-in-a-city-is-reachable-any-other/</guid>
      <description>题目链接：pdf
题目给出一个有向图，要求输出图中强连通分量的个数。
我把这样的强连通分量叫做一个sink：不存在一个边从这个强连通分量中的任意 一个点连接到其它连通分量。也就是说如果把这个强连通分量缩成一个点的话， 它的出度为0。
我把和一个图的所有边都反向的图叫做反向图。貌似没有这样的术语。不知道 reverse graph应该怎么翻译。
思路大概是这样的：
 如果我们知道一个有向图的sink中的一个点，那么我们就可以求出这个强连 通分量的所有点，因为强连通分量中的任意两个点都相互可达。 如何求有相同的sink？我们知道反向图的强连通分量的个数和原图的强连通 分量一定是一样的，只是方向不同。并且，原图的sink对应于反向图的 source strong connected component，所以我们可以通过求反向图的source SCC，来求原图的sink。 求一个图的source SCC的思路和用DFS求拓扑排序的思路是一样的，我们可以 按照所有点的DFS回退的时刻降序排序，这样DFS最晚回退的点就是反向图的 source SCC，也就是原图的sink，我们可以第二次DFS得到这个sink中的所有 点并且从原图中去掉，继续求下一个sink，同时计数。  实现的过程中出现了非常难以发现的bug：一个vector，我在dfs里面加入元素， 然后在调用dfs的外层循环中循环这个vector。所以对于小数据并没有显现出错 误，对于10000的数据就出现段错误了。调试了很久，不过xhe也教了我好多调试 的方法，比如gdb，valgrind，libsigseg库，strace等。不过gdb调试的时候查 看STL数据结构里面的数据的时候还是有点小麻烦，这个时候IDE的调试工具就好 用很多了。</description>
    </item>
    
  </channel>
</rss>