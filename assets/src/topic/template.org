* 基础算法模板
** 单链表
#+begin_src cpp
  // head 存储头节点，e[] 存储节点值，ne[] 存储下一个节点指针，idx 表示下一个可以使用的节点下标
  int head, e[N], ne[N], idx;

  // 初始化
  void init()
  {
    head = -1;
    idx = 0;
  }

  // 在链表头插入一个数
  void insert(int a)
  {
    e[idx] = a, ne[idx] = head, head = idx++;
  }

  // 将头节点删除，假设头节点存在
  void remove()
  {
    head = ne[head];
  }
#+end_src
** 双链表
#+begin_src cpp
  // e[] 存储节点值，l[] 存储前续节点，r[] 存储后续节点，idx 表示下一个可以使用的节点下标
  int e[N], l[N], r[N], idx;

  // 初始化
  void init()
  {
    // 0 是头节点，1 是尾节点
    r[0] = 1, r[1] = 0;
    idx = 2;
  }

  // 在节点 k 的右边插入一个数 x
  void insert(int k, int x)
  {
    e[idx] = x;
    int q = r[k];
    l[q] = idx;
    r[k] = idx;
    l[idx] = k, r[idx] = q;
    ++idx;
  }

  // 删除节点 k
  void remove(int k)
  {
    int p = l[k], q = r[k];
    r[p] = q, l[q] = p;
  }
#+end_src
** 栈
#+begin_src cpp
  // tt 表示栈顶
  int stk[N], tt = 0;

  // 向栈顶压入一个数字
  stk[++tt] = x;

  // 从栈顶弹出一个数字
  --tt;

  // 栈顶的值
  stk[tt];

  // 判断栈非空
  if (tt) { }
#+end_src
** 队列
#+begin_src cpp
  // hh 表示队头，tt 表示队尾
  int q[N], hh = 0, tt = -1;

  // 向队尾插入一个数字
  q[++tt] = x;

  // 从队头弹出一个数字
  ++hh;

  // 取队头的值
  q[hh];

  // 判断队列非空
  if (hh <= tt) { }
#+end_src
** 循环队列
#+begin_src cpp
  // hh 表示队头，tt 表示队尾的后一个位置
  int q[N], hh = 0, tt = 0;

  // 向队尾插入一个数字
  q[tt++] = x;
  if (tt == N) tt = 0;

  // 从队头弹出一个数字
  ++hh;
  if (hh == N) hh = 0;

  // 队头的值
  q[hh];

  // 判断队列非空
  if (hh != tt) { }
#+end_src
** 单调栈
#+begin_src cpp
  int tt = 0;
  for (int i = 1; i <= n; ++i) {
    while (tt && check(stk[tt], i)) --tt;
    stk[++tt] = i;
  }
#+end_src
** 单调队列
#+begin_src cpp
  int hh = 0, tt = -1;
  for (int i = 0; i < n; ++i) {
    while (hh <= tt && check_out(q[hh])) ++hh;
    while (hh <= tt && check(q[tt], i)) --tt;
    q[++tt] = i;
  }
#+end_src
** KMP
#+begin_src cpp
  // s[] original string
  // p[] pattern string
  // n = strlen(s), m = strlen(p + 1)

  // ne[]
  for (int i = 2, j = 0; i <= m; i++) {
    while (j && p[i] != p[j+1]) j = ne[j];
    if (p[i] == p[j+1]) ++j;
    ne[i] = j;
  }

  // match
  for (int i = 1, j = 0; i <= n; i++) {
    while (j && s[i] != p[j+1]) j = ne[j];
    if (s[i] == p[j+1]) ++j;
    if (j == m) {
      j = ne[j];
      // match success
    }
  }
#+end_src
** Trie 树
#+begin_src cpp
  int son[N][26], cnt[N], idx;

  void insert(char *str) {
    int p = 0;
    for (int i = 0; str[i]; i++) {
      int u = str[i] - 'a';
      if (!son[p][u]) son[p][u] = ++idx;
      p = son[p][u];
    }
    ++cnt[p];
  }

  int query(char *str) {
    int p = 0;
    for (int i = 0; str[i]; ++i) {
      int u = str[i] - 'a';
      if (!son[p][u]) return 0;
      p = son[p][u];
    }
    return cnt[p];
  }
#+end_src
** 并查集
#+begin_src cpp
  const int N = 100000;
  int fa[N], sz[N];

  int Find(int x) {
    if (fa[x] == x) return x;
    return fa[x] = Find(fa[x]);
  }

  void Union(int x, int y) {
    int rx = Find(x), ry = Find(y);
    if (rx == ry) return;
    fa[ry] = rx;
    sz[rx] += sz[ry];
  }

  void init(int n) {
    for (int i = 0; i < n; ++i) {
      fa[i] = i;
      sz[i] = 1;
    }
  }
#+end_src
** 堆
   #+begin_src cpp
     #include <algorithm>

     using namespace std;

     const int N = 100010;
     // ph[k] 存储第 k 个节点在堆中的下标
     // hp 是反函数
     // h 是堆数组
     // sz 是堆大小
     int h[N], sz, ph[N], hp[N];

     void heap_swap(int x, int y) {
       swap(ph[hp[x]], ph[hp[y]]);
       swap(hp[x], hp[y]);
       swap(h[x], h[y]);
     }

     void Down(int x) {
       int t = x, l = x * 2, r = l + 1;
       if (l <= sz && h[t] < h[l]) t = l;
       if (r <= sz && h[t] < h[r]) t = r;
       if (t == x) return;
       heap_swap(h[t], h[x]);
       Down(t);
     }

     void Up(int x) {
       while (x / 2 && h[x / 2] < h[x]) {
         heap_swap(h[x], h[x / 2]);
         x /= 2;
       }
     }

     void init(int n) {
       for (int i = n / 2; i; --i)
         Down(i);
     }
   #+end_src
** 哈希表
*** 拉链法
    #+begin_src cpp
      #include <cstring>

      const int N = 100003;
      int h[N], e[N], ne[N], idx;

      void init() { memset(h, -1, sizeof h); }

      void insert(int x) {
        int k = (x % N + N) % N;
        e[idx] = x;
        ne[idx] = h[k];
        h[k] = idx++;
      }

      bool find(int x) {
        int k = (x % N + N) % N;
        for (int i = h[k]; i != -1; i = ne[i]) {
          if (e[i] == x) return true;
        }
        return false;
      }
    #+end_src
*** 开放寻址法
    #+begin_src cpp
      #include <cstring>

      const int N = 200003, nul = 0x3f3f3f3f;
      int h[N];

      void init() { memset(h, 0x3f, sizeof h); }

      int find(int x) {
        int k = (x % N + N) % N;
        while (h[k] != x && h[k] != nul) {
          ++k;
          if (k == N) k = 0;
        }
        return k;
      }
    #+end_src
*** 字符串哈希
    #+begin_src cpp
      #include <cstring>

      typedef unsigned long long ull;
      // 131 or 13331 是两个比较好的质数
      const int P = 131, N = 100010;
      // p[k] 存储 p^k
      // h[k] 存储 s[1,k] 字符的哈希值
      ull p[N], h[N];
      char str[N];
      int n;

      void init() {
        p[0] = 1;
        for (int i = 1; i <= n; ++i) {
          p[i] = p[i - 1] * P;
          h[i] = h[i - 1] * P + str[i];
        }
      }

      ull get(int l, int r) {
        return h[r] - h[l - 1] * p[r - l + 1];
      }
    #+end_src
** 最短路
*** 单源最短路
**** 稠密图
     复杂度 O(n^2), n 为点数
     #+begin_src cpp
       #include <cstring>
       #include <algorithm>

       using namespace std;

       const int N = 1010, INF = 0x3f3f3f3f;
       int n, g[N][N], st[N], dis[N];

       int dijkstra() {
         memset(dis, INF, sizeof dis);
         dis[1] = 0;

         for (int i = 0; i < n; ++i) {
           int t = -1;
           for (int j = 1; j <= n; ++j) {
             if (!st[j] && (t == -1 || dis[j] < dis[t]))
               t = j;
           }
           st[t] = 1;
    
           for (int j = 1; j <= n; ++j) {
             if (g[t][j] != INF) {
               dis[j] = min(dis[j], dis[t] + g[t][j]);
             }
           }
         }

         return dis[n] == INF ? -1 : dis[n];
       }

       int main() {
         return 0;
       }

     #+end_src
**** 稀疏图
     复杂度 O(m*log(n))，m 为边数，n 为点数
     #+begin_src cpp
       #include <algorithm>
       #include <vector>
       #include <queue>
       #include <cstring>

       using namespace std;
       typedef pair<int, int> PII;

       const int N = 1010, INF = 0x3f3f3f3f;

       int n, e[N], ne[N], h[N], idx;
       int w[N], dis[N], st[N];

       void Add(int a, int b, int c) {
         e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx++;
       }

       int dijkstra() {
         memset(dis, INF, sizeof dis);
         dis[1] = 0;

         priority_queue<PII, vector<PII>, greater<PII> > que;
         que.push(PII(0, 1));

         while (!que.empty()) {
           PII t = que.top();
           int ver = t.second, base = t.first;
           if (st[ver]) continue;
           st[ver] = 1;
           for (int j = h[ver]; j != -1; j = ne[j]) {
             if (base + w[j] < dis[j]) {
               dis[j] = base + w[j];
               que.push(PII(dis[j], j));
             }
           }
         }

         return dis[n] == INF ? -1 : dis[n];
       }

       void Init() {
         memset(h, -1, sizeof h);
       }

       int main() {
         Init();

         return 0;
       }

     #+end_src
*** 多源最短路
