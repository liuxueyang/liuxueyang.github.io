<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Common Lisp on LXY Site</title>
    <link>http://liuxueyang.github.io/tags/common-lisp/</link>
    <description>Recent content in Common Lisp on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 Aug 2016 23:19:46 +0000</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/tags/common-lisp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Text Adventure Game in Land of Lisp</title>
      <link>http://liuxueyang.github.io/posts/text-adventure-game-in-land-of-lisp/</link>
      <pubDate>Mon, 01 Aug 2016 23:19:46 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/text-adventure-game-in-land-of-lisp/</guid>
      <description>Land of LiSP 这本书里面的第五章和第六章构建了一个字符冒险游戏，游戏截图如下：
;; 2016.07.30 23:22:41 PM ;; Sabastian ;; building a text adventure game engine ;; ==================== ;; location (defparameter *nodes* &#39;((living-room (you are in the living-room. a wizard is snoring loudly on the couch.)) (garden (you are in a beautiful garden. there is a well in front of you.)) (attic (you are in the attic. there is a giant welding torch in the corner.)))) (defun describe-location (location nodes) &amp;quot;location is a symbol.</description>
    </item>
    
    <item>
      <title>Some simple syntax on lisp and perl</title>
      <link>http://liuxueyang.github.io/posts/some-simple-syntax-on-lisp-and-perl/</link>
      <pubDate>Sun, 17 Aug 2014 23:55:06 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/some-simple-syntax-on-lisp-and-perl/</guid>
      <description>I am learning perl and common lisp these days.
I think perl&amp;rsquo;s syntax is beautiful and simple and I am getting used to it. I like it very much. I learn it just to do some text tasks.
Besides, I once thought lisp&amp;rsquo;s braces are so confusing. I even like those now. It is interesting to write in lisp.
Here, I place some meaningless codes here to help me remember the syntax in future.</description>
    </item>
    
    <item>
      <title>A Text Adventure Game by CommonLISP</title>
      <link>http://liuxueyang.github.io/posts/a-text-adventure-game-by-commonlisp/</link>
      <pubDate>Sun, 01 Jun 2014 20:23:29 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/a-text-adventure-game-by-commonlisp/</guid>
      <description>Today, I read the book Land of Lisp. It is interesting to write a text adventure game.
First, there are some basic and useful functions.
##some useful functions 1. mapcar
This function takes another function and a list, and then applies this function to every member of a list.This is an example: ```lisp (mapcar #&#39;sqrt &#39;(1 2 3 4 5)) ``` It will output a list contains the square root of each element.</description>
    </item>
    
    <item>
      <title>Chapter 5</title>
      <link>http://liuxueyang.github.io/posts/chapter-5/</link>
      <pubDate>Tue, 27 May 2014 23:51:33 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/chapter-5/</guid>
      <description>##Optional Parameters
we can use optional arguments in a function, such as:
```common lisp (defun foo (a b &amp;amp;optional c d) (list a b c d))
 This will result: ```common lisp (foo 1 2)	-&amp;gt; (1 2 NIL NIL) (foo 1 2 3)	-&amp;gt; (1 2 3 NIL) (foo 1 2 3 4)	-&amp;gt; (1 2 3 4)  Besides, we can set default value for a argument:
``` common lisp (defun foo (a &amp;amp;optional (b 10)) (list a b))</description>
    </item>
    
  </channel>
</rss>