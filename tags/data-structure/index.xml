<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on LXY Site</title>
    <link>http://liuxueyang.github.io/tags/data-structure/</link>
    <description>Recent content in Data Structure on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Wed, 03 Jul 2013 14:10:00 +0000</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>hdu3308  线段树——区间合并</title>
      <link>http://liuxueyang.github.io/posts/hdu3308--%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</link>
      <pubDate>Wed, 03 Jul 2013 14:10:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu3308--%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</guid>
      <description>更新一个点； 求某个区间的最长连续上升序列； 链接：http://acm.hdu.edu.cn/showproblem.php?pid=3308
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; #define maxn 100009 #define mid int m=(l+r)&amp;gt;&amp;gt;1 int num[maxn], lsum[maxn&amp;lt;&amp;lt;2], rsum[maxn&amp;lt;&amp;lt;2], msum[maxn&amp;lt;&amp;lt;2], n, m, p, v, a, b; void pushup(int o, int l, int r) { mid; if (num[m] &amp;lt; num[m+1]) { lsum[o] = (lsum[o&amp;lt;&amp;lt;1] == m+1-l) ?</description>
    </item>
    
    <item>
      <title>线段树，区间更新</title>
      <link>http://liuxueyang.github.io/posts/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0/</link>
      <pubDate>Wed, 03 Jul 2013 14:08:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E6%9B%B4%E6%96%B0/</guid>
      <description>把一个区间内的值全部修改为一个确定值； 计算某个区间内的最大值，最小值，和。
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;cstdlib&amp;gt; using namespace std; #define INF 0x7f7f7f7f #define Max 600000 long long a[Max], setv[Max], minv[Max], maxv[Max], sumv[Max], _max, _min, _sum, v; int y1,y2; bool flagv[Max]; inline void maintain(int o, int L, int R) { if (flagv[o]) minv[o] = maxv[o] = setv[o], sumv[o] = (R-L+1)*setv[o]; else if (R &amp;gt; L) minv[o] = min(minv[o*2], minv[o*2+1]), maxv[o] = max(maxv[o*2], maxv[o*2+1]), sumv[o] = sumv[o*2] + sumv[o*2+1]; } void build(int o, int L, int R) { if (L == R) scanf(&amp;quot;%lld&amp;quot;, a+o), minv[o] = maxv[o] = sumv[o] = setv[o] = a[o]; else {int M = L + (R-L)/2; build(o&amp;lt;&amp;lt;1, L, M), build(o*2+1, M+1, R), maintain(o, L, R);} flagv[o] = false; } inline void pushdown(int o) { if (flagv[o]) setv[o&amp;lt;&amp;lt;1] = setv[o&amp;lt;&amp;lt;1|1] = setv[o], flagv[o&amp;lt;&amp;lt;1] = flagv[o&amp;lt;&amp;lt;1|1] = true, flagv[o] = false; } void update(int o, int L, int R) { if (y1 &amp;lt;= L &amp;amp;&amp;amp; y2 &amp;gt;= R) setv[o] = v, flagv[o] = true; else { int M = L + (R-L)/2; pushdown(o); if (y1 &amp;lt;= M) update(o&amp;lt;&amp;lt;1, L, M); else maintain(o&amp;lt;&amp;lt;1, L, M); if (y2 &amp;gt; M) update(o&amp;lt;&amp;lt;1|1, M+1, R); else maintain(o&amp;lt;&amp;lt;1|1, M+1, R); } maintain(o, L, R); } void query(int o, int L, int R) { if (flagv[o]) _sum += setv[o]*(min(y2, R) - max(y1, L) + 1), _min = min(_min, setv[o]), _max = max(_max, setv[o]); else if (y1 &amp;lt;= L &amp;amp;&amp;amp; y2 &amp;gt;= R) _sum += sumv[o], _min = min(_min, minv[o]), _max = max(_max, maxv[o]); else {int M = L + (R-L)/2; if (y1 &amp;lt;= M) query(o&amp;lt;&amp;lt;1, L, M); if (y2 &amp;gt; M) query(o&amp;lt;&amp;lt;1|1, M+1, R);} } int main(void) { freopen(&amp;quot;input.</description>
    </item>
    
    <item>
      <title>hdu1394 Minimum Inversion Number ——线段树</title>
      <link>http://liuxueyang.github.io/posts/hdu1394-minimum-inversion-number-%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
      <pubDate>Thu, 23 May 2013 18:25:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu1394-minimum-inversion-number-%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid>
      <description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1394 题目大意： 给定一个0到ｎ-1的数字组成的序列，它的逆序数，然后把第一个数字放到末尾，得到一个新的序列，再求逆序数，再把新序列的第一个数字放到末尾，一直这样做，求所有这些序列的逆序数的最小值。 题目思路： 可以先求出起初的序列的逆序数。然后根据逆序数的定义，把一个数字从开头移动到末尾，逆序数的改变量是什么？求出这个改变量，然后剩下的所有序列的逆序数就都求出来了。 这样考虑：一个数字 ｂ[i] 在开头，比它大的数字有 ｂ[i] 个，也就是说和这个数字组成了 ｂ[i] 个逆序，把它放到最后，这个数字可以组成 n-1-ｂ[i] 个逆序，所以逆序数的增量是 n - 1 - ｂ[i] - ｂ[i] ，这样就可以根据原来的序列的逆序数求出剩下的所有序列的逆序数了～</description>
    </item>
    
    <item>
      <title>poj2299 Ultra-QuickSort ——线段树</title>
      <link>http://liuxueyang.github.io/posts/poj2299-ultra-quicksort-%E7%BA%BF%E6%AE%B5%E6%A0%91/</link>
      <pubDate>Thu, 23 May 2013 14:40:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj2299-ultra-quicksort-%E7%BA%BF%E6%AE%B5%E6%A0%91/</guid>
      <description>题目链接：http://poj.org/problem?id=2299 题目大意： 给n个任意的数字，把他们排序，求最少的交换次数。 题目思路： 开始没想法。后来zjl一说才知道。原来就是求逆序数！每一个数字前面有多少比它小的，这个数字就至少要交换多少次。所以，只需要求这列数字的逆序数就可以！好神奇 还有一个，就是每个数字的范围比较大，开始我还在想开数组貌似放不下，后来zjl说离散化……好吧，果然，我肿么没想到o(╯□╰)o感觉挺自然的想法啊…… 剩下的就是原来做过的题目了……甚至比原来做过的还简单 最后一个问题就是，最后的结果应该是long long 的，稍微算一下就知道，最大值(2*10^11)超过了4个字节的整型范围(4 * 10^9)，long long 范围是(1*10^19)，所以输出要按照long long 输出……这个问题以后一定要注意，判断一下数字的范围！别傻乎乎地就用int…… //#define LOCAL #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x7fffffff; const int MINN = -0x7fffffff; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; const int MAX = 500000+10; typedef struct node { int val, index; bool operator &amp;lt; (const node &amp;amp; other) const { return val &amp;lt; other.</description>
    </item>
    
    <item>
      <title>hdu1272 小希的迷宫 ——并查集无向图判环</title>
      <link>http://liuxueyang.github.io/posts/hdu1272-%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB-%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%97%A0%E5%90%91%E5%9B%BE%E5%88%A4%E7%8E%AF/</link>
      <pubDate>Sun, 12 May 2013 23:44:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu1272-%E5%B0%8F%E5%B8%8C%E7%9A%84%E8%BF%B7%E5%AE%AB-%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%97%A0%E5%90%91%E5%9B%BE%E5%88%A4%E7%8E%AF/</guid>
      <description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1272 题目大意： 给一个无向图，判断是不是有环，有就输出No，否则输出Yes 题目思路： 用并查集，开始还天真地以为要用拓扑排序，好吧……虽然那个也可以做，可是为什么不用简单的方法呢？
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x7fffffff; const int MINN = -0x7fffffff; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; const int MAX = 100000+10; int parent[MAX]; bool flag; void init() { for (int i = 1; i&amp;lt;=MAX; ++i) parent[i] = -1; } int find(int x) { int s; for (s = x; parent[s] !</description>
    </item>
    
    <item>
      <title>hdu2795 Billboard ——线段树入门题</title>
      <link>http://liuxueyang.github.io/posts/hdu2795-billboard-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8%E9%A2%98/</link>
      <pubDate>Wed, 24 Apr 2013 09:30:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu2795-billboard-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8%E9%A2%98/</guid>
      <description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=2795 题目大意： 高度为h,长度为w的板子，贴n个海报，每个海报的高度都为1，长度由n个整数给出。贴海报的原则是，从高到低，优先选高的，从左到右，优先选右边的位置。起初每个海报在板子上所在的行数。 题目思路： 建立一棵叶子节点有h个的线段树，每个节点代表这个区间内的最大值，最开始，叶子节点都是w。然后每插入一个值就插入到叶子节点，输出叶子节点的值，然后更新父节点。 这道题目的难点是，要想到建立线段树，把模型抽象出来。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x3f3f3f3f; const int MIN = -0x3f3f3f3f; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; const int MAX = 200000+10; int a[MAX&amp;lt;&amp;lt;2], n, h, w, b[MAX]; void pushup(int rt) { a[rt] = max(a[rt&amp;lt;&amp;lt;1], a[rt&amp;lt;&amp;lt;1|1]); } void build(int l, int r, int rt) { if (l == r) { a[rt] = w; return; } int m = (l + r) &amp;gt;&amp;gt; 1; build(lson); build(rson); pushup(rt); } void update(int p, int k, int l, int r, int rt) { if (l == r) { a[rt] -= k; return; } int m = (l + r) &amp;gt;&amp;gt; 1; if (p &amp;lt;= m) update(p, k, lson); else update(p, k, rson); pushup(rt); } int query(int k, int l, int r, int rt) { if (l == r) { return l; } int m = (l + r) &amp;gt;&amp;gt; 1, ret = 0; /* if (a[rt&amp;lt;&amp;lt;1] &amp;gt;= k) ret = query(k, lson); else ret = query(k, rson); */ if (a[rt] &amp;gt;= k) { if (a[rt&amp;lt;&amp;lt;1] &amp;gt;= k) ret = query(k, lson); else ret = query(k, rson); } else return 0; return ret; } int main(void){ #ifndef ONLINE_JUDGE freopen(&amp;quot;hdu2795.</description>
    </item>
    
    <item>
      <title>hdu1394 Minimum Inversion Number ——线段树入门题</title>
      <link>http://liuxueyang.github.io/posts/hdu1394-minimum-inversion-number-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8%E9%A2%98/</link>
      <pubDate>Tue, 23 Apr 2013 23:23:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu1394-minimum-inversion-number-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8%E9%A2%98/</guid>
      <description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1394 题目大意： 给一个数字由0~n-1这n个数字组成的数列，不断地把第一个数字移动到最后，一共得到n个数列。求这n个数列中，逆序数最小是多少。 题目思路： 首先，建一棵线段树，每个节点表示这个区间内已经插入的数字的个数，开始初始化为0.然后没读入一个数字，把这个数字插入得到线段树的叶子节点，然后向上更新父节点。这样，在建树的过程中，就可以统计出每个逆序数，也就是说，可以再插入每个数字的时候，查找已经插入的数字当中，比这个数字大的数字有多少个，直到最后就可以求出这个数列的逆序数。 然后，利用数列的性质。因为每次都是把第一个数字移动到最后，比如这个数字是a，那么显然，比这个数字小的有a个，比这个数字大的有n-1-a个；因为这个数字在最前面，所以当前这个数字的逆序数是a，把这个数字移动到最后之后，这个数字的逆序数是n-1-a，逆序数增加量：n-1-a-a。这样就可以由原来的数列的逆序数求出所有数列的逆序数。好神奇~
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x3f3f3f3f; const int MIN = -0x3f3f3f3f; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; const int MAX = 5000+10; int a[MAX&amp;lt;&amp;lt;2], n, b[MAX]; void pushup(int rt) { a[rt] = a[rt&amp;lt;&amp;lt;1] + a[rt&amp;lt;&amp;lt;1|1]; } void build(int l, int r, int rt) { if (l == r) { a[rt] = 0; return; } int m = (l + r) &amp;gt;&amp;gt; 1; build(lson); build(rson); pushup(rt); } void update(int p, int l, int r, int rt) { if (l == r) { a[rt]++; return; } int m = (l + r) &amp;gt;&amp;gt; 1; if (p &amp;lt;= m) update(p, lson); else update(p, rson); pushup(rt); } int query(int L, int R, int l, int r, int rt) { if (L &amp;lt;= l &amp;amp;&amp;amp; R &amp;gt;= r) { return a[rt]; } int m = (l + r) &amp;gt;&amp;gt; 1, ret = 0; if (L &amp;lt;= m) ret += query(L, R, lson); if (R &amp;gt; m) ret += query(L, R, rson); return ret; } int main(void){ #ifndef ONLINE_JUDGE freopen(&amp;quot;hdu1394.</description>
    </item>
    
    <item>
      <title>hdu1754 I Hate It &amp;&amp; hdu1166 敌兵布阵 ——线段树复习</title>
      <link>http://liuxueyang.github.io/posts/hdu1754-i-hate-it--hdu1166-%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Tue, 23 Apr 2013 14:54:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu1754-i-hate-it--hdu1166-%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A4%8D%E4%B9%A0/</guid>
      <description>题目链接： http://acm.hdu.edu.cn/showproblem.php?pid=1754　 http://acm.hdu.edu.cn/showproblem.php?pid=1166 都是最基础的线段树，考的知识点就是点更新，区间求和，区间求最大值。再次学线段树，感觉理解加深了一些。 但是写的时候还是会出现各种奇葩的错误。唉。 hdu1754
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x3f3f3f3f; const int MIN = -0x3f3f3f3f; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; const int MAX = 200000+10; int gra[MAX&amp;lt;&amp;lt;2], m , n; void pushup(int rt) { gra[rt] = max(gra[rt&amp;lt;&amp;lt;1], gra[rt&amp;lt;&amp;lt;1|1]); } void build(int l, int r, int rt) { if (l == r) { scanf(&amp;quot;%d&amp;quot;, &amp;amp;gra[rt]); return; } int m = (l + r) &amp;gt;&amp;gt; 1; build(lson); build(rson); pushup(rt); } void update(int p, int k, int l, int r, int rt) { if (l == r) { gra[rt] = k; return; } int m = (l + r) &amp;gt;&amp;gt; 1; if (p &amp;lt;= m) update(p, k, lson); else update(p, k, rson); pushup(rt); } int query(int L, int R, int l, int r, int rt) { if (L &amp;lt;= l &amp;amp;&amp;amp; R &amp;gt;= r) { return gra[rt]; } int m = (l + r) &amp;gt;&amp;gt; 1, ret = 0; if (L &amp;lt;= m) ret = max(ret, query(L, R, lson)); if (R &amp;gt; m) ret = max(ret, query(L, R, rson)); return ret; } int main(void){ #ifndef ONLINE_JUDGE freopen(&amp;quot;hdu1754.</description>
    </item>
    
    <item>
      <title>poj2001 Shortest Prefixes ——字典树复习</title>
      <link>http://liuxueyang.github.io/posts/poj2001-shortest-prefixes-%E5%AD%97%E5%85%B8%E6%A0%91%E5%A4%8D%E4%B9%A0/</link>
      <pubDate>Fri, 19 Apr 2013 15:46:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj2001-shortest-prefixes-%E5%AD%97%E5%85%B8%E6%A0%91%E5%A4%8D%E4%B9%A0/</guid>
      <description>题目链接：http://poj.org/problem?id=2001 这道题目以前写过，复习一下字典树，再写一遍……
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x3f3f3f3f; const int MIN = -0x3f3f3f3f; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; char a[1000+10][30], base = &#39;a&#39;; const int lo = 26; typedef struct trie{ int num; bool terminal; struct trie *son[lo]; }trie; trie *newtrie(){ trie *pnt = new trie; pnt-&amp;gt;num = 1; pnt-&amp;gt;terminal = false; for (int i = 0; i &amp;lt; lo; ++i) pnt-&amp;gt;son[i] = NULL; return pnt; } void insert(char str[], trie *pnt, int len){ trie *tem = pnt; for (int i= 0; i &amp;lt; len; ++i){ if (tem-&amp;gt;son[str[i]-base] !</description>
    </item>
    
    <item>
      <title>poj 3225 Help with Intervals</title>
      <link>http://liuxueyang.github.io/posts/poj-3225-help-with-intervals/</link>
      <pubDate>Wed, 13 Mar 2013 21:35:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-3225-help-with-intervals/</guid>
      <description>Description Input Output Sample Input Sample Output #include &amp;lt;cstdio&amp;gt; using namespace std; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 const int maxn = 65535*2+10; int cover[maxn&amp;lt;&amp;lt;2],xorm[maxn&amp;lt;&amp;lt;2]; bool hash[maxn+10]; void fxor(int rt){ if (cover[rt] !</description>
    </item>
    
    <item>
      <title>hdu 1698 Just a Hook</title>
      <link>http://liuxueyang.github.io/posts/hdu-1698-just-a-hook/</link>
      <pubDate>Mon, 04 Mar 2013 01:36:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu-1698-just-a-hook/</guid>
      <description>Just a Hook
Time Limit: 4000&amp;frasl;2000 MS (Java/Others) Memory Limit: 32768&amp;frasl;32768 K (Java/Others) Total Submission(s): 10792 Accepted Submission(s): 5328</description>
    </item>
    
    <item>
      <title>hdu 2795 Billboard</title>
      <link>http://liuxueyang.github.io/posts/hdu-2795-billboard/</link>
      <pubDate>Sat, 02 Mar 2013 19:25:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu-2795-billboard/</guid>
      <description>Billboard
Time Limit: 20000&amp;frasl;8000 MS (Java/Others) Memory Limit: 32768&amp;frasl;32768 K (Java/Others) Total Submission(s): 5912 Accepted Submission(s): 2682</description>
    </item>
    
    <item>
      <title>hdu 1394 Minimum Inversion Number</title>
      <link>http://liuxueyang.github.io/posts/hdu-1394-minimum-inversion-number/</link>
      <pubDate>Sat, 02 Mar 2013 18:00:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu-1394-minimum-inversion-number/</guid>
      <description>Minimum Inversion Number
Time Limit: 2000&amp;frasl;1000 MS (Java/Others) Memory Limit: 65536&amp;frasl;32768 K (Java/Others) Total Submission(s): 5892 Accepted Submission(s): 3587</description>
    </item>
    
    <item>
      <title>poj 2945 Find the Clones</title>
      <link>http://liuxueyang.github.io/posts/poj-2945-find-the-clones/</link>
      <pubDate>Wed, 27 Feb 2013 23:50:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-2945-find-the-clones/</guid>
      <description>Find the Clones Time Limit: 5000MS Memory Limit: 65536K Total Submissions: 6265 Accepted: 2328</description>
    </item>
    
    <item>
      <title>poj 1056 IMMEDIATE DECODABILITY</title>
      <link>http://liuxueyang.github.io/posts/poj-1056-immediate-decodability/</link>
      <pubDate>Wed, 27 Feb 2013 19:05:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-1056-immediate-decodability/</guid>
      <description>Description Input Output Sample Input Sample Output
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstring&amp;gt; using namespace std; const int sonnum = 2, base = &#39;0&#39;; struct Trie { int num; bool terminal; Trie *son[sonnum]; }; Trie *NewTrie() { Trie *temp = new Trie; temp-&amp;gt;num = 1; temp-&amp;gt;terminal = false; for (int i = 0; i &amp;lt; sonnum; ++i) temp-&amp;gt;son[i] = NULL; return temp; } bool Insert(Trie *pnt, char *s, int len) { Trie *temp = pnt; bool mrk = true; for (int i = 0; i &amp;lt; len; ++i) { if (temp-&amp;gt;son[s[i]-base] == NULL) temp-&amp;gt;son[s[i]-base] = NewTrie(); else { temp-&amp;gt;son[s[i]-base]-&amp;gt;num++; if (temp-&amp;gt;son[s[i]-base]-&amp;gt;terminal == true) mrk = false; } temp = temp-&amp;gt;son[s[i]-base]; } temp-&amp;gt;terminal = true; return mrk; } int main(void) { Trie *tree; char a[20]; int cnt = 1; #ifndef ONLINE_JUDGE freopen(&amp;quot;poj2056.</description>
    </item>
    
    <item>
      <title>poj 2503 Babelfish</title>
      <link>http://liuxueyang.github.io/posts/poj-2503-babelfish/</link>
      <pubDate>Wed, 27 Feb 2013 00:28:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-2503-babelfish/</guid>
      <description>Babelfish Time Limit: 3000MS Memory Limit: 65536K Total Submissions: 26498 Accepted: 11378</description>
    </item>
    
    <item>
      <title>poj 2001 Shortest Prefixes ——字典树入门</title>
      <link>http://liuxueyang.github.io/posts/poj-2001-shortest-prefixes-%E5%AD%97%E5%85%B8%E6%A0%91%E5%85%A5%E9%97%A8/</link>
      <pubDate>Tue, 26 Feb 2013 23:29:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-2001-shortest-prefixes-%E5%AD%97%E5%85%B8%E6%A0%91%E5%85%A5%E9%97%A8/</guid>
      <description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; using namespace std; char a[1000+10][25]; const int sonnum = 26, base = &#39;a&#39;; struct Trie { int num; bool terminal; struct Trie *son[sonnum]; }; Trie *NewTrie() { Trie *temp = new Trie; temp-&amp;gt;num = 1; temp-&amp;gt;terminal = false; for (int i = 0; i &amp;lt; sonnum; ++i) temp-&amp;gt;son[i] = NULL; return temp; } void Insert(Trie *pnt, char *s, int len) { Trie *temp = pnt; for (int i = 0; i &amp;lt; len; ++i) { if (temp-&amp;gt;son[s[i]-base] == NULL) temp-&amp;gt;son[s[i]-base] = NewTrie(); else temp-&amp;gt;son[s[i]-base]-&amp;gt;num++; temp = temp-&amp;gt;son[s[i]-base]; } temp-&amp;gt;terminal = true; } Trie *Find(Trie *pnt, char *s, int len) { Trie *temp = pnt; for (int i = 0; i &amp;lt; len; ++i) { if (temp-&amp;gt;son[s[i]-base]-&amp;gt;num == 1) { printf(&amp;quot;%c&amp;quot;, s[i]); return temp; } printf(&amp;quot;%c&amp;quot;, s[i]); temp = temp-&amp;gt;son[s[i]-base]; } return temp; } int main(void) { #ifndef ONLINE_JUDGE freopen(&amp;quot;poj2001.</description>
    </item>
    
    <item>
      <title>hdu1754 I Hate It ——线段数入门题</title>
      <link>http://liuxueyang.github.io/posts/hdu1754-i-hate-it-%E7%BA%BF%E6%AE%B5%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</link>
      <pubDate>Fri, 23 Nov 2012 18:42:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu1754-i-hate-it-%E7%BA%BF%E6%AE%B5%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</guid>
      <description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1754
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;algorithm&amp;gt; #define maxn 200000&amp;lt;&amp;lt;2 //#define max(a,b) ((a)&amp;gt;(b)?</description>
    </item>
    
  </channel>
</rss>