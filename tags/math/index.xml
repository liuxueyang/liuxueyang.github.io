<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Math on LXY Site</title>
    <link>http://liuxueyang.github.io/tags/math/</link>
    <description>Recent content in Math on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Sat, 03 Aug 2013 10:52:00 +0000</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/tags/math/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>hdu4642 Fliping game        ——博弈</title>
      <link>http://liuxueyang.github.io/posts/hdu4642-fliping-game--------%E5%8D%9A%E5%BC%88/</link>
      <pubDate>Sat, 03 Aug 2013 10:52:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu4642-fliping-game--------%E5%8D%9A%E5%BC%88/</guid>
      <description>link:http://acm.hdu.edu.cn/showproblem.php?pid=4642 refer to: http://www.cnblogs.com/jackge/archive/2013/08/01/3231573.html 这道题目很有意思。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;utility&amp;gt; #include &amp;lt;functional&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;numeric&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;ctime&amp;gt; #include &amp;lt;iterator&amp;gt; const int INF = 0x3f3f3f3f; const int dir[8][2] = {{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1}}; using namespace std; int main(void) { #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description>
    </item>
    
    <item>
      <title>codeforces magic five －－快速幂模</title>
      <link>http://liuxueyang.github.io/posts/codeforces-magic-five-%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1/</link>
      <pubDate>Fri, 19 Jul 2013 16:29:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/codeforces-magic-five-%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1/</guid>
      <description>题目链接：http://codeforces.com/contest/327/problem/C 首先先算出一个周期里面的值，保存在ans里面，就是平常的快速幂模m做法． 然后要计算一个公式，比如有k个部分，那么对于没一个位置i, 都有2^i + 2^(i+n) + &amp;hellip; + 2^(i+(k-1)*n) = 2^i(1 + 2^n + &amp;hellip; + 2^((k-1)*n)) = 2^i * (1-2^(n*k))/(1-2^n) 所以结果就是ans * (1-2^(n*k))/(1-2^n) % MOD; 然后就是关键计算(1-2^(n*k))/(1-2^n) % MOD； 用到费马小定理a^(p-1)同余于1(mod 1)．p是一个质数，那么a^(p-2) * a 同余于１(mod 1) ，所以a 的逆元就是 a^(p-2) MOD是一个质数,所以(1-2^(n*k))/(1-2^n) % MOD = (2^(n*k)-1)/(2^n-1) % MOD = (2^(n*k)-1)%MOD * ((2^n-1)^(MOD-2))%MOD</description>
    </item>
    
    <item>
      <title>uestc1888 Birthday Party 　　　组合数学，乘法原理</title>
      <link>http://liuxueyang.github.io/posts/uestc1888-birthday-party-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E4%B9%98%E6%B3%95%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 18 Jul 2013 17:26:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uestc1888-birthday-party-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%E4%B9%98%E6%B3%95%E5%8E%9F%E7%90%86/</guid>
      <description>题目链接：http://acm.hust.edu.cn/vjudge/contest/view.action?cid=25539#problem/G 题目意思： 有n个人，每个人有一个礼物，每个人能拿自己礼物，n个人随机送礼物，给一个数字k,求出可以找到k个人，满足：这ｋ个人里面，第一个人把礼物给第二个人，第二个人把礼物给第三个人，以此类推，第ｋ个人把礼物给第１个人．求满足这个条件的概率． 组合数学： 满足条件的一组ｋ个人称为一个ｋ环，注意：可能有多个ｋ环！先考虑至少形成一个ｋ环的情况：A(n,k) * (n-1)^(n-k) / (k * (n-1)^(n)) == A(n, k) / (k * (n-1)^k) ；然后在考虑至少形成m个环的情况． 设至少形成m个环的概率是：f(m) = A(n, km)/(k^mm!</description>
    </item>
    
    <item>
      <title>高斯消元</title>
      <link>http://liuxueyang.github.io/posts/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</link>
      <pubDate>Thu, 11 Jul 2013 22:21:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</guid>
      <description>输入线性方程组的维数，然后随即生成一定有解的线性方程组的增广矩阵，求出解，然后输出时间和方程组的解，以及和标准解的误差（其实就是和标准解的方差）。 #include &amp;lt;cstdio&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;ctime&amp;gt; using namespace std; const double eps=1e-9; const int MAX=20000; double ans[MAX]; int n; double **inputdata; double *result; /* 输出标准解 */ void printresult() { for(int i=0;i&amp;lt;n;i++) printf(&amp;quot;%.</description>
    </item>
    
    <item>
      <title>hdu1420 Prepared for New Acmer ——快速幂</title>
      <link>http://liuxueyang.github.io/posts/hdu1420-prepared-for-new-acmer-%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Sat, 01 Jun 2013 19:33:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu1420-prepared-for-new-acmer-%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=1420 题目大意： 中文题。 题目思路： 赤裸裸的快速幂。呵呵
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstdlib&amp;gt; using namespace std; #define LL long long LL m; LL Po(LL a, LL b) { LL ans = 1; while (b) { if (b&amp;amp;1) { ans = (ans * a) % m; b--; } b /= 2; a = a * a % m; } return ans; } int main(void) { LL n, a, b; #ifndef ONLINE_JUDGE freopen(&amp;quot;1420.</description>
    </item>
    
    <item>
      <title>poj3070 Fibonacci ——矩阵快速幂</title>
      <link>http://liuxueyang.github.io/posts/poj3070-fibonacci-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Sun, 19 May 2013 01:38:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj3070-fibonacci-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>题目链接：http://poj.org/problem?id=3070 题目大意： 求第N项的Fibonacci数的后四位。 题目思路： 根据公式： 用矩阵快速幂就OK，模板题……但还是TLE了一次，原因是题目要求输入-1结束，我没看到……o(╯□╰)o
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;cmath&amp;gt; using namespace std; const int MAX = 2; const int M = 10000; typedef struct { int m[MAX][MAX]; }Matrix; Matrix a, per; int n; void init() { int i , j; for (i = 0; i &amp;lt; n; ++i) { for (j = 0; j &amp;lt; n; ++j) { per.</description>
    </item>
    
    <item>
      <title>poj2478 ——欧拉函数入门题</title>
      <link>http://liuxueyang.github.io/posts/poj2478-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</link>
      <pubDate>Mon, 22 Apr 2013 12:58:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj2478-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</guid>
      <description>题目链接：http://poj.org/problem?id=2478 题目大意： 给你一个数列f(N)，这个数列是由一系列不能约分的分数 a / b (0 &amp;lt; a &amp;lt; b &amp;lt;= n 且 (a,b) = 1)按照递增的顺序排列而成的。输入一个N，求这个数列中元素的个数。 题目思路： 因为题目只需要求出元素的个数，所以，把分母相同的放在一起，然后就发现规律了，其实就是求从2到 n 的欧拉函数的和。范围只有10^6，可以打表预处理。思路很清晰。因为要反复用欧拉函数，所以比较快的方法是用递推的方法求。 for (i = 1; i &amp;lt;= maxn; ++i) f[i] = i; for (i = 2; i &amp;lt;= maxn; i+=2) f[i] /= 2; for (i = 3; i &amp;lt;= maxn; i+=2){ if (f[i] == i){ for (j = i; j &amp;lt;= maxn; j+=i){ f[j] = f[j] / i * (i - 1); } } }  　这个方法和筛法求素数比较类似，貌似就是那个思想。模拟一下什么就懂了。这里也用到了欧拉函数的性质：φ(n) = n * (1 - 1/p1) * (1 - 1/p2) * …… * (1 - 1/pk)。</description>
    </item>
    
    <item>
      <title>poj2407 Relatives ——欧拉函数入门题</title>
      <link>http://liuxueyang.github.io/posts/poj2407-relatives-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</link>
      <pubDate>Mon, 22 Apr 2013 08:36:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj2407-relatives-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</guid>
      <description>题目链接：http://poj.org/problem?id=2407 题目大意： 这个题目就是欧拉函数的定义，求一个数字的欧拉函数。 题目思路： 用公式：φ(n) = n * (1-1/p1) * (1-1/p2) * …… * (1-1/pk)。</description>
    </item>
    
    <item>
      <title>poj2480 Longge&#39;s problem ——积性函数入门题</title>
      <link>http://liuxueyang.github.io/posts/poj2480-longges-problem-%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</link>
      <pubDate>Sun, 21 Apr 2013 23:45:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj2480-longges-problem-%E7%A7%AF%E6%80%A7%E5%87%BD%E6%95%B0%E5%85%A5%E9%97%A8%E9%A2%98/</guid>
      <description>题目链接：http://poj.org/problem?id=2480 题目大意： 给定一个数字N，求∑gcd(i, N) 1&amp;lt;=i &amp;lt;=N 的值。 题目思路： x是一个数字，m与n互素，则gcd(x,m*n) = gcd(x, m) * gcd(x, n) 令g(y) = gcd(x, y) 那么g(y)是一个积性函数。令f(N) = ∑gcd(i, N) 满足gcd(x, n) = 1 的个数是欧拉函数φ(n)，那么可以知道，满足gcd(x, n) = p 的个数可以这么求：x 和 n 同时除以 p ，那么gcd(x/p, n/p) = 1 ，那么个数就是φ(n/p)。 分解N = p1^a1 * p2^a2 * …… *pn^an ，则f(N) = f(p1^a1 * p2^a2 * …… *pn^an) = f(p1^a1) * f(p2^a2) * …… * f(pn^an)； 可以枚举pi^ai的因数，对于f(pi^ai) = 1 * φ(pi^ai) + pi * φ(pi^(ai-1)) + pi^2 * φ(pi^(ai-2)) + …… + pi^(ai-1) * φ(pi) + pi^ai * φ(1)； 根据φ(pi^ai) = pi^ai - pi^(ai-1)，那么可以化简上面的式子：f(pi^ai) = ai * pi^ai + ai * pi^(ai-1) + pi^ai = pi^ai * (ai + ai/pi + 1)； 所以，f(N) = N * (a1 + a1/p1 + 1) * (a2 + a2/p2 + 1) * …… * (an + an/pn + 1)。 这题当然不是自己想出来的，但是学习了一下积性函数，看的神牛的解题代码：http://hi.</description>
    </item>
    
    <item>
      <title>poj 1995 Raising Modulo Numbers ——快速幂</title>
      <link>http://liuxueyang.github.io/posts/poj-1995-raising-modulo-numbers-%E5%BF%AB%E9%80%9F%E5%B9%82/</link>
      <pubDate>Tue, 02 Apr 2013 17:47:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-1995-raising-modulo-numbers-%E5%BF%AB%E9%80%9F%E5%B9%82/</guid>
      <description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x3f3f3f3f; const int MIN = -0x3f3f3f3f; int m; LL power(LL a, LL k){ LL ans = 1; while (k){ if (k&amp;amp;1){ ans = (ans * a) % m; k--; } k &amp;gt;&amp;gt;= 1; a = (a*a)%m; } return ans; } int main(void){ #ifndef ONLINE_JUDGE freopen(&amp;quot;1995.</description>
    </item>
    
    <item>
      <title>poj 3233 Matrix Power Series ——矩阵快速幂&#43;二分求解</title>
      <link>http://liuxueyang.github.io/posts/poj-3233-matrix-power-series-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82&#43;%E4%BA%8C%E5%88%86%E6%B1%82%E8%A7%A3/</link>
      <pubDate>Tue, 02 Apr 2013 17:06:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-3233-matrix-power-series-%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82&#43;%E4%BA%8C%E5%88%86%E6%B1%82%E8%A7%A3/</guid>
      <description>Description Input Output Sample Input Sample Output
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; #define LL long long #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 typedef struct matrix{ int a[33][33]; }matrix; matrix A, B, per; int m, k, n; void init(){ scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;n, &amp;amp;k, &amp;amp;m); for (int i = 0; i &amp;lt; n; ++i){ for (int j = 0; j &amp;lt; n; ++j){ scanf(&amp;quot;%d&amp;quot;, &amp;amp;A.</description>
    </item>
    
    <item>
      <title>hdu 2035 人见人爱A^B ——同余的简单性质</title>
      <link>http://liuxueyang.github.io/posts/hdu-2035-%E4%BA%BA%E8%A7%81%E4%BA%BA%E7%88%B1ab-%E5%90%8C%E4%BD%99%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%A7%E8%B4%A8/</link>
      <pubDate>Sun, 31 Mar 2013 22:19:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu-2035-%E4%BA%BA%E8%A7%81%E4%BA%BA%E7%88%B1ab-%E5%90%8C%E4%BD%99%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%A7%E8%B4%A8/</guid>
      <description>Time Limit: 2000&amp;frasl;1000 MS (Java/Others) Memory Limit: 65536&amp;frasl;32768 K (Java/Others)Total Submission(s): 15572 Accepted Submission(s): 11012 </description>
    </item>
    
    <item>
      <title>hdu 1021 Fibonacci Again   ——同余的简单性质</title>
      <link>http://liuxueyang.github.io/posts/hdu-1021-fibonacci-again---%E5%90%8C%E4%BD%99%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%A7%E8%B4%A8/</link>
      <pubDate>Sun, 31 Mar 2013 22:12:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu-1021-fibonacci-again---%E5%90%8C%E4%BD%99%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%A7%E8%B4%A8/</guid>
      <description>Time Limit: 2000&amp;frasl;1000 MS (Java/Others) Memory Limit: 65536&amp;frasl;32768 K (Java/Others)Total Submission(s): 26755 Accepted Submission(s): 12950 </description>
    </item>
    
    <item>
      <title>nefu118 n!后面有多少个0 数论</title>
      <link>http://liuxueyang.github.io/posts/nefu118-n%E5%90%8E%E9%9D%A2%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA0-%E6%95%B0%E8%AE%BA/</link>
      <pubDate>Sat, 30 Mar 2013 02:25:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/nefu118-n%E5%90%8E%E9%9D%A2%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%AA0-%E6%95%B0%E8%AE%BA/</guid>
      <description>数论题。统计n!里面有多少个素数5即可。公式：[n/p] + [n/p^2] + [n/p^3] + …… 然后发现一个很无语的问题，nefu上面不能用这个：
#ifndef ONLINE_JUDGE freopen(&amp;quot;nefu118.</description>
    </item>
    
    <item>
      <title>poj 1061 青蛙的约会  ——扩展欧几里得</title>
      <link>http://liuxueyang.github.io/posts/poj-1061-%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A--%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</link>
      <pubDate>Mon, 18 Mar 2013 16:13:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/poj-1061-%E9%9D%92%E8%9B%99%E7%9A%84%E7%BA%A6%E4%BC%9A--%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</guid>
      <description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cstring&amp;gt; #define LL long long int LL exgcd(LL a, LL b, LL &amp;amp;x, LL &amp;amp;y){ if (b == 0){ x = 1; y = 0; return a; } LL r = exgcd(b, a%b, x, y); LL t = x; x = y; y = t - a / b * y; return r; } LL gcd(LL a, LL b){ return b ==0?</description>
    </item>
    
    <item>
      <title>hdu 1214 圆桌会议</title>
      <link>http://liuxueyang.github.io/posts/hdu-1214-%E5%9C%86%E6%A1%8C%E4%BC%9A%E8%AE%AE/</link>
      <pubDate>Fri, 15 Mar 2013 19:22:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/hdu-1214-%E5%9C%86%E6%A1%8C%E4%BC%9A%E8%AE%AE/</guid>
      <description>圆桌会议
Time Limit: 2000&amp;frasl;1000 MS (Java/Others) Memory Limit: 65536&amp;frasl;32768 K (Java/Others) Total Submission(s): 2179 Accepted Submission(s): 1490</description>
    </item>
    
  </channel>
</rss>