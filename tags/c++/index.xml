<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on LXY Site</title>
    <link>http://liuxueyang.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 06 Mar 2017 23:24:07 +0000</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>复习C&#43;&#43;</title>
      <link>http://liuxueyang.github.io/posts/%E5%A4%8D%E4%B9%A0c/</link>
      <pubDate>Mon, 06 Mar 2017 23:24:07 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E5%A4%8D%E4%B9%A0c/</guid>
      <description>今天复习了一下C++。很久很久不碰这门语言，早上看到一段代码竟然感觉十分陌生。this，const pointer，引用之类的，有点忘了。其实也不是忘，就是感觉很陌生。比如this别的语言里面也有，只是不是指针，比较容易混淆。所以就大概查了一下C++ Primer，然后做了几道题目。放在这里。
题目一 给CMyString类写一个方法，使它能够支持赋值=操作。CMyString类已经给出。
#include &amp;lt;bits/stdc++.h&amp;gt; // implement a operator `=` on class CMyString using namespace std; class CMyString { public: CMyString(char * pData = NULL); CMyString(const CMyString &amp;amp; str); CMyString &amp;amp; operator =(const CMyString &amp;amp;); void print(); ~CMyString(void); private: char * m_pData; }; CMyString &amp;amp; CMyString::operator =(const CMyString &amp;amp; str) { // if (this == &amp;amp;str) return *this; // delete [] m_pData; // m_pData = NULL; // m_pData = new char[strlen(str.</description>
    </item>
    
    <item>
      <title>const member function in cpp</title>
      <link>http://liuxueyang.github.io/posts/const-member-function-in-cpp/</link>
      <pubDate>Mon, 06 Mar 2017 11:25:18 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/const-member-function-in-cpp/</guid>
      <description>默认情况下，this是一个const pointer to the nonconst version of the class type。比如有一个类A，那么在类里面，this的类型是A * const。因为不能把一个const对象的地址赋值给一个指向nonconst对象的指针，因此不能把this绑定到一个const对象上。这就导致，不能在const对象上调用一个nonconst member function。</description>
    </item>
    
    <item>
      <title>const pointer and pointer to const in Cpp</title>
      <link>http://liuxueyang.github.io/posts/const-pointer-and-pointer-to-const-in-cpp/</link>
      <pubDate>Mon, 06 Mar 2017 10:03:28 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/const-pointer-and-pointer-to-const-in-cpp/</guid>
      <description>中文翻译好像有常量指针和指针常量这两种说法。然而翻译过来让我更加费解。还是英文更加直白。
pointer to const const int b = 30; const int * bptr = &amp;amp;b;  bptr是一个指针，它指向的是一个类型为const int的对象。可以对bptr本身的内容（保存的地址）进行修改，但是不能对它指向的对象进行修改：</description>
    </item>
    
    <item>
      <title>NFA2DFA</title>
      <link>http://liuxueyang.github.io/posts/nfa2dfa/</link>
      <pubDate>Wed, 28 May 2014 14:01:53 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/nfa2dfa/</guid>
      <description>input: number of symbols symbol set(each space between two symbol) number of states(state number starts from 1 to n by default) start state number number of accept states accept states set state transfer table (epsilon transfer is at column one and if there are several epsilon transfers, seperate them with a comma without spaces) The following file is the input file.</description>
    </item>
    
  </channel>
</rss>