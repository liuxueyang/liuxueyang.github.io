<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uva on LXY Site</title>
    <link>http://liuxueyang.github.io/tags/uva/</link>
    <description>Recent content in Uva on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 15 Aug 2013 18:03:00 +0000</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/tags/uva/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>uva147 Dollars      ——完全背包</title>
      <link>http://liuxueyang.github.io/posts/uva147-dollars------%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/</link>
      <pubDate>Thu, 15 Aug 2013 18:03:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva147-dollars------%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/</guid>
      <description>link:http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=83 和完全背包一样的思想。 有两个trick： 没了。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;utility&amp;gt; #include &amp;lt;functional&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;numeric&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;ctime&amp;gt; #include &amp;lt;iterator&amp;gt; const int INF = 0x3f3f3f3f; const int dir[8][2] = {{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1}}; using namespace std; long long d[33333]; int a[11]={5,10,20,50,100,200,500,1000,2000,5000,10000}; int main(void) { ios::sync_with_stdio(false); #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description>
    </item>
    
    <item>
      <title>uva674 Coin Change ——完全背包</title>
      <link>http://liuxueyang.github.io/posts/uva674-coin-change-%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/</link>
      <pubDate>Thu, 15 Aug 2013 17:59:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva674-coin-change-%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/</guid>
      <description>link:http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=615 和完全背包一样的思想。
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;utility&amp;gt; #include &amp;lt;functional&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;numeric&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;ctime&amp;gt; #include &amp;lt;iterator&amp;gt; const int INF = 0x3f3f3f3f; const int dir[8][2] = {{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1}}; using namespace std; int a[5]={1,5,10,25,50}; int f[7777]; int main(void) { ios::sync_with_stdio(false); #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description>
    </item>
    
    <item>
      <title>uva562 Dividing coins   01背包</title>
      <link>http://liuxueyang.github.io/posts/uva562-dividing-coins---01%E8%83%8C%E5%8C%85/</link>
      <pubDate>Tue, 06 Aug 2013 10:45:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva562-dividing-coins---01%E8%83%8C%E5%8C%85/</guid>
      <description>link:http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=503 分成２半，并且两半的差距最小，背包的体积变成V/2
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;list&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;utility&amp;gt; #include &amp;lt;functional&amp;gt; #include &amp;lt;fstream&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;sstream&amp;gt; #include &amp;lt;numeric&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;ctime&amp;gt; #include &amp;lt;iterator&amp;gt; const int INF = 0x3f3f3f3f; const int dir[8][2] = {{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1}}; using namespace std; int V, c[111], w[111], f[55555], n; int main(void) { #ifndef ONLINE_JUDGE freopen(&amp;quot;in.</description>
    </item>
    
    <item>
      <title>uva624 CD　　　０１背包&#43;输出最优解</title>
      <link>http://liuxueyang.github.io/posts/uva624-cd%EF%BC%90%EF%BC%91%E8%83%8C%E5%8C%85&#43;%E8%BE%93%E5%87%BA%E6%9C%80%E4%BC%98%E8%A7%A3/</link>
      <pubDate>Tue, 06 Aug 2013 10:41:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva624-cd%EF%BC%90%EF%BC%91%E8%83%8C%E5%8C%85&#43;%E8%BE%93%E5%87%BA%E6%9C%80%E4%BC%98%E8%A7%A3/</guid>
      <description>link:http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=565 用一个二维数组g[i][v]表示：当状态转移到v的时候，第i个物品是不是用到，如果用到标记１，否则标记０． 输出路径的时候，注意，从物品编号０一直到n-1.如果某个物品被用到了，g[i][v]里面的v，就要减去这个物品的体积，然后继续往下找．
/* * ===================================================================================== * Filename: cd.cpp * Created: 04/08/2013 15:21:34 * Author: liuxueyang (lxy), 1459917536@qq.</description>
    </item>
    
    <item>
      <title>uva 11020 - Efficient Solutions ——平衡BST</title>
      <link>http://liuxueyang.github.io/posts/uva-11020---efficient-solutions-%E5%B9%B3%E8%A1%A1bst/</link>
      <pubDate>Thu, 04 Jul 2013 00:25:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-11020---efficient-solutions-%E5%B9%B3%E8%A1%A1bst/</guid>
      <description>链接：http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1961 训练指南page228
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;set&amp;gt; using namespace std; struct Point { int a, b; bool operator &amp;lt; (const Point &amp;amp; other) const { return (a &amp;lt; other.</description>
    </item>
    
    <item>
      <title>uva11078 Open Credit System</title>
      <link>http://liuxueyang.github.io/posts/uva11078-open-credit-system/</link>
      <pubDate>Tue, 21 May 2013 18:26:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva11078-open-credit-system/</guid>
      <description>题目链接：http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2019 题目大意： 给一个长度为n的序列，求Ai - Aj (i &amp;lt; j)的最大值。序列的长度最大是10^5 题目思路： 动态维护某一个数字之前的最大值，不断更新之。同时不断更新结果ans，更新的方法是ans和当前数字之前的最大值与这个数字作差，取其中的最大值。时间复杂度O(N),空间复杂度O(1)</description>
    </item>
    
    <item>
      <title>uva11462 Age Sort ——计数排序</title>
      <link>http://liuxueyang.github.io/posts/uva11462-age-sort-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Tue, 21 May 2013 17:00:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva11462-age-sort-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>题目链接：http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=2457 题目大意： 给很多个范围在１到１００之内的数字，数量最多有2*10^6个，排序输出。 题目思路： 数组很大，超内存。不能快排。所以采用计数排序
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cmath&amp;gt; using namespace std; int a[120]; void solve() { int n, tmp, i, j; while (~scanf(&amp;quot;%d&amp;quot;, &amp;amp;n)) { if (!</description>
    </item>
    
    <item>
      <title>uva133 The Dole Queue 循环队列模拟</title>
      <link>http://liuxueyang.github.io/posts/uva133-the-dole-queue-%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E6%A8%A1%E6%8B%9F/</link>
      <pubDate>Tue, 14 May 2013 11:01:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva133-the-dole-queue-%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E6%A8%A1%E6%8B%9F/</guid>
      <description>题目链接：http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=69 题目大意： 1到n按照逆时针的顺序围成一个环，一个人逆时针从1开始数k个数字，另一个人顺时针从n开始数m个数字，每次两个人最终数到的数字输出，并且把他们从原来的环里面删除，如果两个人数到的数字不同，输出一对，如果相同，输出这个数字。不管重复上面的做法，直到n个数字全部被删除。 题目思路： 模拟题，代码弱，写了很久，写不出来，就是感觉比较麻烦，看了人家的代码，做法很好！http://blog.csdn.net/actoy/article/details/8747826
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x7fffffff; const int MINN = -0x7fffffff; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; int main(void){ #ifndef ONLINE_JUDGE freopen(&amp;quot;uva133.</description>
    </item>
    
    <item>
      <title>uva127 ``Accordian&#39;&#39; Patience ——链表模拟题</title>
      <link>http://liuxueyang.github.io/posts/uva127-accordian-patience-%E9%93%BE%E8%A1%A8%E6%A8%A1%E6%8B%9F%E9%A2%98/</link>
      <pubDate>Mon, 13 May 2013 19:10:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva127-accordian-patience-%E9%93%BE%E8%A1%A8%E6%A8%A1%E6%8B%9F%E9%A2%98/</guid>
      <description>题目链接：http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;category=103&amp;amp;page=show_problem&amp;amp;problem=63 题目大意：神牛讲的很清楚~http://blog.csdn.net/camelwombat/article/details/5949508 感觉还是首先要读懂题目意思，这个也是有难度的 题目思路： 用数组模拟链表，考的是代码能力，关键是逻辑关系搞清楚，然后再敲，再就是细节问题，代码有一点小错就需要调很久。 参考这位神牛的思路写的……http://blog.csdn.net/goomaple/article/details/7802686
#include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;deque&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x7fffffff; const int MINN = -0x7fffffff; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; typedef struct node{ int len; char rank[54], suit[54]; }node; node card[54]; void eachmove(int pos, int step) { int Len = card[pos-step].</description>
    </item>
    
    <item>
      <title>uva10591 - Happy Number ——水题</title>
      <link>http://liuxueyang.github.io/posts/uva10591---happy-number-%E6%B0%B4%E9%A2%98/</link>
      <pubDate>Mon, 15 Apr 2013 23:35:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva10591---happy-number-%E6%B0%B4%E9%A2%98/</guid>
      <description>题目链接：http://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;amp;Itemid=8&amp;amp;page=show_problem&amp;amp;problem=1532 题目大意： 给一个数字，各位数字的平方和相加，依次循环，如果最后得到1，那么这个数字就是happy number，如果不能，就是unhappy number。 思路： 因为题目范围只有10^9，所以可以暴力求解，数字的平方和最大是9*9*9=729，可以用一个数组标记这个数字是否被访问过。 #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;cctype&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;algorithm&amp;gt; #define lson l, m, rt&amp;lt;&amp;lt;1 #define rson m+1, r, rt&amp;lt;&amp;lt;1|1 using namespace std; typedef long long int LL; const int MAXN = 0x3f3f3f3f; const int MIN = -0x3f3f3f3f; const double eps = 1e-9; const int dir[8][2] = {{0,1},{1,0},{0,-1},{-1,0},{-1,1}, {1,1},{1,-1},{-1,-1}}; int visit[1000]; int solve(int n){ int m = 0; while (n){ m += (n%10)*(n%10); n /= 10; } return m; } int main(void){ #ifndef ONLINE_JUDGE freopen(&amp;quot;uva10591.</description>
    </item>
    
    <item>
      <title>uva 11991 - Easy Problem from Rujia Liu?</title>
      <link>http://liuxueyang.github.io/posts/uva-11991---easy-problem-from-rujia-liu/</link>
      <pubDate>Sat, 16 Mar 2013 18:31:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-11991---easy-problem-from-rujia-liu/</guid>
      <description>Though Rujia Liu usually sets hard problems for contests (for example, regional contests like Xi&amp;rsquo;an 2006, Beijing 2007 and Wuhan 2009, or UVa OJ contests like Rujia Liu&amp;rsquo;s Presents 1 and 2), he occasionally sets easy problem (for example, &amp;lsquo;the Coco-Cola Store&amp;rsquo; in UVa OJ), to encourage more people to solve his problems :D Given an array, your task is to find the k-th occurrence (from left to right) of an integer v.</description>
    </item>
    
    <item>
      <title>uva 11995 - I Can Guess the Data Structure!</title>
      <link>http://liuxueyang.github.io/posts/uva-11995---i-can-guess-the-data-structure/</link>
      <pubDate>Sat, 16 Mar 2013 14:30:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-11995---i-can-guess-the-data-structure/</guid>
      <description>There is a bag-like data structure, supporting two operations: Throw an element x into the bag.</description>
    </item>
    
    <item>
      <title>uva 537 - Artificial Intelligence?</title>
      <link>http://liuxueyang.github.io/posts/uva-537---artificial-intelligence/</link>
      <pubDate>Fri, 09 Nov 2012 23:42:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-537---artificial-intelligence/</guid>
      <description>Physics teachers in high school often think that problems given as text are more demanding than pure computations.</description>
    </item>
    
    <item>
      <title>uva 10010 - Where&#39;s Waldorf?</title>
      <link>http://liuxueyang.github.io/posts/uva-10010---wheres-waldorf/</link>
      <pubDate>Fri, 09 Nov 2012 07:57:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-10010---wheres-waldorf/</guid>
      <description>Given a m by n grid of letters, ( ), and a list of words, find the location in the grid at which the word can be found.</description>
    </item>
    
    <item>
      <title>uva 253 - Cube painting</title>
      <link>http://liuxueyang.github.io/posts/uva-253---cube-painting/</link>
      <pubDate>Thu, 08 Nov 2012 22:07:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-253---cube-painting/</guid>
      <description>We have a machine for painting cubes. It is supplied with three different colors: blue, red and green.</description>
    </item>
    
    <item>
      <title>uva 10161 - Ant on a Chessboard</title>
      <link>http://liuxueyang.github.io/posts/uva-10161---ant-on-a-chessboard/</link>
      <pubDate>Thu, 08 Nov 2012 21:13:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-10161---ant-on-a-chessboard/</guid>
      <description>One day, an ant called Alice came to an M*M chessboard.</description>
    </item>
    
    <item>
      <title>uva 113 - Power of Cryptography</title>
      <link>http://liuxueyang.github.io/posts/uva-113---power-of-cryptography/</link>
      <pubDate>Thu, 08 Nov 2012 00:07:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-113---power-of-cryptography/</guid>
      <description>Current work in cryptography involves (among other things) large prime numbers and computing powers of numbers modulo functions of these primes.</description>
    </item>
    
    <item>
      <title>uva 621 - Secret Research</title>
      <link>http://liuxueyang.github.io/posts/uva-621---secret-research/</link>
      <pubDate>Wed, 07 Nov 2012 23:32:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-621---secret-research/</guid>
      <description>At a certain laboratory results of secret research are thoroughly encrypted.</description>
    </item>
    
    <item>
      <title>uva 107 - The Cat in the Hat</title>
      <link>http://liuxueyang.github.io/posts/uva-107---the-cat-in-the-hat/</link>
      <pubDate>Wed, 07 Nov 2012 21:46:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-107---the-cat-in-the-hat/</guid>
      <description>(An homage to Theodore Seuss Geisel) The Cat in the Hat is a nasty creature,But the striped hat he is wearing has a rather nifty feature.</description>
    </item>
    
    <item>
      <title>uva 10790 - How Many Points of Intersection?</title>
      <link>http://liuxueyang.github.io/posts/uva-10790---how-many-points-of-intersection/</link>
      <pubDate>Wed, 07 Nov 2012 00:12:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-10790---how-many-points-of-intersection/</guid>
      <description>We have two rows. There are a dots on the top row and b dots on the bottom row.</description>
    </item>
    
    <item>
      <title>uva 11044 Searching for Nessy</title>
      <link>http://liuxueyang.github.io/posts/uva-11044-searching-for-nessy/</link>
      <pubDate>Tue, 06 Nov 2012 23:57:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-11044-searching-for-nessy/</guid>
      <description>The Loch Ness Monsteris a mysterious and unidentified animal said to inhabit Loch Ness, a large deep freshwater loch near the city of Inverness in northern Scotland.</description>
    </item>
    
    <item>
      <title>uva 573 The Snail</title>
      <link>http://liuxueyang.github.io/posts/uva-573-the-snail/</link>
      <pubDate>Tue, 06 Nov 2012 23:54:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-573-the-snail/</guid>
      <description>The Snail
A snail is at the bottom of a 6-foot well and wants to climb to the top.</description>
    </item>
    
    <item>
      <title>uva10177 (2/3/4)-D Sqr/Rects/Cubes/Boxes?</title>
      <link>http://liuxueyang.github.io/posts/uva10177-2-3-4-d-sqr-rects-cubes-boxes/</link>
      <pubDate>Mon, 05 Nov 2012 19:37:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva10177-2-3-4-d-sqr-rects-cubes-boxes/</guid>
      <description>Problem J (2/3/4)-D Sqr/Rects/Cubes/Boxes? Input: standard input Output: standard output Time Limit: 2 seconds You can see a (4x4) grid below.</description>
    </item>
    
    <item>
      <title>uva 100 The 3n&#43;1 problem</title>
      <link>http://liuxueyang.github.io/posts/uva-100-the-3n&#43;1-problem/</link>
      <pubDate>Mon, 05 Nov 2012 10:48:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-100-the-3n&#43;1-problem/</guid>
      <description>Problems in Computer Science are often classified as belonging to a certain class of problems (e.</description>
    </item>
    
    <item>
      <title>uva 10038 Jolly Jumpers</title>
      <link>http://liuxueyang.github.io/posts/uva-10038-jolly-jumpers/</link>
      <pubDate>Mon, 05 Nov 2012 10:42:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/uva-10038-jolly-jumpers/</guid>
      <description>A sequence of n &amp;gt; 0 integers is called a jolly jumper if the absolute values of the difference between successive elements take on all the values 1 through n-1.</description>
    </item>
    
  </channel>
</rss>