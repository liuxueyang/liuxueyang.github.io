<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Masm on LXY Site</title>
    <link>http://liuxueyang.github.io/tags/masm/</link>
    <description>Recent content in Masm on LXY Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2018 (LXY). All Rights Reserved.</copyright>
    <lastBuildDate>Thu, 17 Oct 2013 21:12:57 +0000</lastBuildDate>
    
	<atom:link href="http://liuxueyang.github.io/tags/masm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>编写安装中断7ch的中断例程：将一个以0结尾的字符串，转化为大写</title>
      <link>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%99%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%AD7ch%E7%9A%84%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B%E5%B0%86%E4%B8%80%E4%B8%AA%E4%BB%A50%E7%BB%93%E5%B0%BE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%A4%A7%E5%86%99/</link>
      <pubDate>Thu, 17 Oct 2013 21:12:57 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%99%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%AD7ch%E7%9A%84%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B%E5%B0%86%E4%B8%80%E4%B8%AA%E4%BB%A50%E7%BB%93%E5%B0%BE%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%A4%A7%E5%86%99/</guid>
      <description>中断的安装程序：
assume cs:code code segment start: mov ax, cs mov ds, ax mov si, offset chstr mov ax, 0 mov es, ax mov di, 200h mov cx, offset chstrend - offset chstr cld rep movsb mov ax, 0 mov es, ax mov word ptr es:[7ch * 4 + 0], 200h mov word ptr es:[7ch * 4 + 2], 0 mov ax, 4c00h int 21h chstr: mov si, 0 lh: mov cx, 0 mov cl, [si] jcxz ok and byte ptr [si], 11011111b inc si jmp lh ok: iret chstrend: nop code ends end start  测试程序：</description>
    </item>
    
    <item>
      <title>编写中断例程7ch：计算word型数据的平方</title>
      <link>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%99%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B7ch%E8%AE%A1%E7%AE%97word%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B9%B3%E6%96%B9/</link>
      <pubDate>Thu, 17 Oct 2013 20:51:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%99%E4%B8%AD%E6%96%AD%E4%BE%8B%E7%A8%8B7ch%E8%AE%A1%E7%AE%97word%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%B9%B3%E6%96%B9/</guid>
      <description>实现计算一个word型数据的平方。
这是安装程序。
assume cs:code code segment start: mov ax, cs mov ds, ax mov si, offset sqr mov ax, 0 mov es, ax mov di, 200h mov cx, offset sqrend - offset sqr cld rep movsb mov ax, 0 mov es, ax mov word ptr es:[7ch * 4+0], 200h mov word ptr es:[7ch * 4 + 2], 0 mov ax, 4c00h int 21h sqr: mul ax iret sqrend: nop code ends end start  这是应用程序。</description>
    </item>
    
    <item>
      <title>编写0号中断的处理程序：处理除法溢出</title>
      <link>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%990%E5%8F%B7%E4%B8%AD%E6%96%AD%E7%9A%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86%E9%99%A4%E6%B3%95%E6%BA%A2%E5%87%BA/</link>
      <pubDate>Thu, 17 Oct 2013 19:49:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%990%E5%8F%B7%E4%B8%AD%E6%96%AD%E7%9A%84%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E5%A4%84%E7%90%86%E9%99%A4%E6%B3%95%E6%BA%A2%E5%87%BA/</guid>
      <description>在除法溢出的时候，在屏幕中间显示字符串“divide error!”
安装程序：
assume cs:code code segment start: mov ax, cs mov ds, ax mov si, offset do0 mov ax, 0 mov es, ax mov di, 200h mov cx, offset do0end - offset do0 cld rep movsb mov ax, 0 mov ds, ax mov word ptr ds:[0*4], 200h mov word ptr ds:[0*4 + 2], 0 do0: jmp do0start db &amp;quot;divide error!</description>
    </item>
    
    <item>
      <title>实验十一：编写子程序</title>
      <link>http://liuxueyang.github.io/posts/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%B8%80%E7%BC%96%E5%86%99%E5%AD%90%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 15 Oct 2013 16:45:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E5%AE%9E%E9%AA%8C%E5%8D%81%E4%B8%80%E7%BC%96%E5%86%99%E5%AD%90%E7%A8%8B%E5%BA%8F/</guid>
      <description>将一个0结尾的字符串中的小写字母转化成大写字母
assume cs:code, ds:data data segment db &amp;quot;Beginner&#39;s All-purpose Symbolic Instruction Code.</description>
    </item>
    
    <item>
      <title>试验十 3.数值显示</title>
      <link>http://liuxueyang.github.io/posts/%E8%AF%95%E9%AA%8C%E5%8D%81-3-%E6%95%B0%E5%80%BC%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Fri, 11 Oct 2013 13:01:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E8%AF%95%E9%AA%8C%E5%8D%81-3-%E6%95%B0%E5%80%BC%E6%98%BE%E7%A4%BA/</guid>
      <description>题目的意思是：
　把一个16进制的数字转化成十进制，然后在屏幕的第3行，第8列，用绿色输出。
这货倒是不太难，就是学会调用之前写过的函数就行了==
assume cs:code, ds:data, ss:stack data segment db 10 dup(0) data ends stack segment dw 10 dup(0) stack ends code segment start: mov ax, 12666 mov dx, 0 mov bx, data mov ds, bx mov si, 0 call dtoc mov dh, 8 mov dl, 3 mov cl, 2 call show_str mov ax, 4c00h int 21h dtoc: push si mov bx, 10 mov cx, ax mov di, 0 sad: div bx add dx, 30h push dx mov dx, 0 inc di mov cx, ax add cx, 1 loop sad mov bp, 0 mov cx, di ago: pop dx mov al, dl mov ds:[bp], al inc bp loop ago mov ds:[bp], 0 pop si ret show_str: push dx push cx ;row dec dh mov al, 0a0h mul dh push ax ;col dec dl mov al, 2h mul dl pop bx add ax, bx mov di, 0b800h mov es, di mov bp, ax mov bl, cl change: mov cl, [si] mov ch, 0 jcxz ok mov di, si add di, di mov al, ds:[si] mov byte ptr es:[bp+di], al mov byte ptr es:[bp+di+1], bl inc si jmp short change ok: pop cx pop dx ret code ends end start  虽然很长……看起来好腻害的样子=_=</description>
    </item>
    
    <item>
      <title>解决除法溢出问题</title>
      <link>http://liuxueyang.github.io/posts/%E8%A7%A3%E5%86%B3%E9%99%A4%E6%B3%95%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 10 Oct 2013 23:54:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E8%A7%A3%E5%86%B3%E9%99%A4%E6%B3%95%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98/</guid>
      <description>被除数是dword型，除数是dword型，结果是dword型。
参数：
　ax=dword型数据的低16位
　dx=dword型数据的高16位
　cx=除数
返回：
　dx=结果的高16位，ax=结果的低16位</description>
    </item>
    
    <item>
      <title>编写子程序，显示字符串</title>
      <link>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%99%E5%AD%90%E7%A8%8B%E5%BA%8F%E6%98%BE%E7%A4%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 08 Oct 2013 11:41:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E7%BC%96%E5%86%99%E5%AD%90%E7%A8%8B%E5%BA%8F%E6%98%BE%E7%A4%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>在屏幕的8行3列，用绿色显示data段中的字符串。
assume cs:code, ds:data data segment db &#39;Welcome to masm!&#39;, 0 data ends code segment start: mov dh, 8 mov dl, 3 mov cl, 2 mov ax, data mov ds, ax mov si, 0 call show_str mov ax, 4c00h int 21h show_str: push dx push cx ;row dec dh mov al, 0a0h mul dh push ax ;col dec dl mov al, 2h mul dl pop bx add ax, bx mov di, 0b800h mov es, di mov bp, ax mov bl, cl change: mov cl, [si] mov ch, 0 jcxz ok mov di, si add di, di mov al, ds:[si] mov byte ptr es:[bp+di], al mov byte ptr es:[bp+di+1], bl inc si jmp short change ok: pop cx pop dx ret code ends end start  开始遇到了很奇怪的bug，最终还是不知道为什么，所以换了一种方式解决问题了。</description>
    </item>
    
    <item>
      <title>call指令的一个细节</title>
      <link>http://liuxueyang.github.io/posts/call%E6%8C%87%E4%BB%A4%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%86%E8%8A%82/</link>
      <pubDate>Mon, 07 Oct 2013 08:49:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/call%E6%8C%87%E4%BB%A4%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%86%E8%8A%82/</guid>
      <description>执行下面这个程序之后，ax的值是多少？
assume cs:code code segment start: mov ax, 0 call s inc ax s: pop ax mov ax, 4c00h int 21h code ends end start  答案是0006h</description>
    </item>
    
    <item>
      <title>终于在cmd窗口里出现了颜色了！！！感动ing……</title>
      <link>http://liuxueyang.github.io/posts/%E7%BB%88%E4%BA%8E%E5%9C%A8cmd%E7%AA%97%E5%8F%A3%E9%87%8C%E5%87%BA%E7%8E%B0%E4%BA%86%E9%A2%9C%E8%89%B2%E4%BA%86%E6%84%9F%E5%8A%A8ing/</link>
      <pubDate>Sun, 06 Oct 2013 15:31:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E7%BB%88%E4%BA%8E%E5%9C%A8cmd%E7%AA%97%E5%8F%A3%E9%87%8C%E5%87%BA%E7%8E%B0%E4%BA%86%E9%A2%9C%E8%89%B2%E4%BA%86%E6%84%9F%E5%8A%A8ing/</guid>
      <description>在窗口的中央打印三行字。
要求：　　第一行绿色字
　第二行绿底红色
　第三行白底蓝色
assume cs:code, ds:data data segment db &#39;welcome to masm!</description>
    </item>
    
    <item>
      <title>一个有意思的汇编程序 ——其实就是一个根据位移进行转移的应用=_=</title>
      <link>http://liuxueyang.github.io/posts/%E4%B8%80%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F-%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%B9%E6%8D%AE%E4%BD%8D%E7%A7%BB%E8%BF%9B%E8%A1%8C%E8%BD%AC%E7%A7%BB%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sun, 06 Oct 2013 14:00:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E4%B8%80%E4%B8%AA%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F-%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E6%A0%B9%E6%8D%AE%E4%BD%8D%E7%A7%BB%E8%BF%9B%E8%A1%8C%E8%BD%AC%E7%A7%BB%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>分析一下这个程序=_=
assume cs:code code segment mov ax, 4c00h int 21h start: mov ax, 0 s: nop nop mov di, offset s mov si, offset s2 mov ax, cs:[si] mov cs:[di], ax s0: jmp short s s1: mov ax, 0 int 21h mov ax, 0 s2: jmp short s1 nop code ends end start  开始，一眼看去，这个程序应该会陷入死循环吧。。</description>
    </item>
    
    <item>
      <title>实验七——王爽…………我写的最长的一个汇编程序==</title>
      <link>http://liuxueyang.github.io/posts/%E5%AE%9E%E9%AA%8C%E4%B8%83%E7%8E%8B%E7%88%BD%E6%88%91%E5%86%99%E7%9A%84%E6%9C%80%E9%95%BF%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 06 Oct 2013 00:20:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E5%AE%9E%E9%AA%8C%E4%B8%83%E7%8E%8B%E7%88%BD%E6%88%91%E5%86%99%E7%9A%84%E6%9C%80%E9%95%BF%E7%9A%84%E4%B8%80%E4%B8%AA%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F/</guid>
      <description>这是我到目前为止写的最长的汇编程序了。
assume cs:sad, ds:data, ss:stack stack segment stack ends data segment db &#39;1975&#39;, &#39;1976&#39;, &#39;1977&#39;, &#39;1978&#39;, &#39;1979&#39;, &#39;1980&#39;, &#39;1981&#39;, &#39;1982&#39;, &#39;1983&#39; db &#39;1984&#39;, &#39;1985&#39;, &#39;1986&#39;, &#39;1987&#39;, &#39;1988&#39;, &#39;1989&#39;, &#39;1990&#39;, &#39;1991&#39;, &#39;1992&#39; db &#39;1993&#39;, &#39;1994&#39;, &#39;1995&#39; ; 21 years -- 54h bytes dd 16, 22, 382, 1356, 2390, 8000, 16000, 24486, 50065, 97479, 140417, 197514 dd 345980, 590827, 803530, 1183000, 1843000, 2759000, 3753000, 4649000, 5937000 ; income in 21 years -- 54h bytes dw 3, 7, 9, 13, 28, 38, 130, 220, 476, 778, 1001, 1442, 2258, 2793, 4037, 5635, 8226 dw 11542, 14430, 15257, 17800 ; staff in 21 years -- 2ah bytes data ends table segment db 21 dup (&#39;year summ ne ?</description>
    </item>
    
    <item>
      <title>bx, bp, si, di寄存器的使用规则</title>
      <link>http://liuxueyang.github.io/posts/bx-bp-si-di%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99/</link>
      <pubDate>Sat, 05 Oct 2013 18:40:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/bx-bp-si-di%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99/</guid>
      <description>首先，都可以单独使用。
另外，组合使用的情况下：
记住这张图片就行了=_=
意思就是，bx只能和si，di组合。bp只能和si，di组合。</description>
    </item>
    
    <item>
      <title>更灵活的定位内存地址的方法 ——将每个单词的前四个字母改为大写</title>
      <link>http://liuxueyang.github.io/posts/%E6%9B%B4%E7%81%B5%E6%B4%BB%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95-%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E5%89%8D%E5%9B%9B%E4%B8%AA%E5%AD%97%E6%AF%8D%E6%94%B9%E4%B8%BA%E5%A4%A7%E5%86%99/</link>
      <pubDate>Sat, 05 Oct 2013 15:32:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E6%9B%B4%E7%81%B5%E6%B4%BB%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95-%E5%B0%86%E6%AF%8F%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E5%89%8D%E5%9B%9B%E4%B8%AA%E5%AD%97%E6%AF%8D%E6%94%B9%E4%B8%BA%E5%A4%A7%E5%86%99/</guid>
      <description>很简单的一个程序
assume cs:code, ss:stack, ds:data data segment db &#39;1. display &#39; db &#39;2.</description>
    </item>
    
    <item>
      <title>更灵活的定位内存地址的方法——大小写转换</title>
      <link>http://liuxueyang.github.io/posts/%E6%9B%B4%E7%81%B5%E6%B4%BB%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 04 Oct 2013 23:46:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E6%9B%B4%E7%81%B5%E6%B4%BB%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%86%85%E5%AD%98%E5%9C%B0%E5%9D%80%E7%9A%84%E6%96%B9%E6%B3%95%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/</guid>
      <description>如下：
;BasiC to BASIC ;MinIX to minix assume cs:code, ds:data data segment db &#39;BaSiC&#39; db &#39;MinIX&#39; data ends code segment start: mov ax, data mov ds, ax mov bx, 0 mov cx, 5 s: mov al, 0[bx] and al, 11011111b mov 0[bx], al mov al, 5[bx] or al, 00100000b mov 5[bx], al inc bx loop s mov ax, 4c00h int 21h code ends end start  很简单的一个程序。</description>
    </item>
    
    <item>
      <title>向内存0:200~0:23f依次传送数据0~3fh</title>
      <link>http://liuxueyang.github.io/posts/%E5%90%91%E5%86%85%E5%AD%980-200-0-23f%E4%BE%9D%E6%AC%A1%E4%BC%A0%E9%80%81%E6%95%B0%E6%8D%AE0-3fh/</link>
      <pubDate>Fri, 04 Oct 2013 14:23:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E5%90%91%E5%86%85%E5%AD%980-200-0-23f%E4%BE%9D%E6%AC%A1%E4%BC%A0%E9%80%81%E6%95%B0%E6%8D%AE0-3fh/</guid>
      <description>只能用字节为单位传送了。
assume cs:sad sad segment start: mov ax, 20h mov ds, ax mov bx, 0 mov cx, 40h s: mov [bx], bl inc bl loop s mov ax, 4c00h int 21h sad ends end  我只能优化到这里了。用了7条指令。</description>
    </item>
    
    <item>
      <title>将内存ffff:0~ffff:b中的数据拷贝到0:200~0:20b中</title>
      <link>http://liuxueyang.github.io/posts/%E5%B0%86%E5%86%85%E5%AD%98ffff-0-ffff-b%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D%E5%88%B00-200-0-20b%E4%B8%AD/</link>
      <pubDate>Fri, 04 Oct 2013 14:12:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E5%B0%86%E5%86%85%E5%AD%98ffff-0-ffff-b%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D%E5%88%B00-200-0-20b%E4%B8%AD/</guid>
      <description>我是按照字，也就是2个字节拷贝的。
这样就可以让循环减半==
assume cs:sad sad segment start: mov ax, 0ffffh mov ds, ax mov bx, 0h mov ax, 20h mov es, ax mov cx, 7h s: mov ax, ds:[bx] mov es:[bx], ax add bx, 2 loop s mov ax, 4c00h int 21h sad ends end  刚听到句歌词：</description>
    </item>
    
    <item>
      <title>计算ffff:0~ffff:b数据的和，结果存在dx中</title>
      <link>http://liuxueyang.github.io/posts/%E8%AE%A1%E7%AE%97ffff-0-ffff-b%E6%95%B0%E6%8D%AE%E7%9A%84%E5%92%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E5%9C%A8dx%E4%B8%AD/</link>
      <pubDate>Fri, 04 Oct 2013 12:28:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E8%AE%A1%E7%AE%97ffff-0-ffff-b%E6%95%B0%E6%8D%AE%E7%9A%84%E5%92%8C%E7%BB%93%E6%9E%9C%E5%AD%98%E5%9C%A8dx%E4%B8%AD/</guid>
      <description>代码：
assume cs:sad sad segment start: mov ax, 0ffffh mov ds, ax mov dx, 0 ; add ds:0bh~ds:1h mov cx, 0bh s: mov ah, 0 mov bx, cx mov al, ds:[bx] add dx, ax loop s ; add ds:0h mov bh, 0 mov bl, ds:[0] add dx, bx mov ax, 4c00h int 21h sad ends end  自己写的==</description>
    </item>
    
    <item>
      <title>debug不过的程序</title>
      <link>http://liuxueyang.github.io/posts/debug%E4%B8%8D%E8%BF%87%E7%9A%84%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Fri, 04 Oct 2013 12:25:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/debug%E4%B8%8D%E8%BF%87%E7%9A%84%E7%A8%8B%E5%BA%8F/</guid>
      <description>下面的程序debug是不能通过的。
至于为什么我还不知道。
assume cs:codesg codesg segment start: mov ax,2000h mov ss, ax mov sp, 0 add sp, 4 pop ax pop bx push ax push bx pop ax pop bx mov ax, 4c00h int 21h codesg ends end  这个问题留在这里，以后解决。</description>
    </item>
    
    <item>
      <title>栈段 ——满是疑问==</title>
      <link>http://liuxueyang.github.io/posts/%E6%A0%88%E6%AE%B5-%E6%BB%A1%E6%98%AF%E7%96%91%E9%97%AE/</link>
      <pubDate>Thu, 03 Oct 2013 19:14:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/%E6%A0%88%E6%AE%B5-%E6%BB%A1%E6%98%AF%E7%96%91%E9%97%AE/</guid>
      <description>遇到一个问题
比如：
用栈操作将10000H~1000FH中的8个字，逆序拷贝到2000H~2000FH中。
写出以下代码：
mov ax, 2000h mov ds, ax mov ax, f00h mov ss, ax mov sp, 1000h pop [e] pop [c] pop [a] pop [8] pop [6] pop [4] pop [2] pop [0]  开始我还以为可能是栈空间太小，跟以前一样的问题，特意把栈的短地址缩小到f00h，可是还是结果不对，跟踪之后我发现，</description>
    </item>
    
    <item>
      <title>CPU的栈机制的一个小问题</title>
      <link>http://liuxueyang.github.io/posts/cpu%E7%9A%84%E6%A0%88%E6%9C%BA%E5%88%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Thu, 03 Oct 2013 16:10:00 +0000</pubDate>
      
      <guid>http://liuxueyang.github.io/posts/cpu%E7%9A%84%E6%A0%88%E6%9C%BA%E5%88%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%97%AE%E9%A2%98/</guid>
      <description>比如要实现下面这个功能。
我们如果要在10000H处写入自行数据2266H，不能用“mov 内存单元， 寄存器”这类指令。怎么做？
代码：
mov ax, 1000h mov ss, ax mov sp, 2 mov ax, 2266h push ax  这段代码，如果是初学，看起来挺对的，一点也没错。</description>
    </item>
    
  </channel>
</rss>