---
layout: post
title: "POJ 1191. 棋盘分割"
date: 2020-06-20 12:00:42 +0800
tags: ACM/ICPC algorithm POJ DP
---

[棋盘分割](http://poj.org/problem?id=1191)

`d[k][x1][y1][x2][y2]`表示对左上角是`(x1, y1)`，右下角是`(x2, y2)`的矩形切割`k`次之后，得到的所有小矩形的分值的平方和的最小值。

记忆化搜索

```cpp
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>

using namespace std;

typedef long long LL;
LL a[8][8], d[15][8][8][8][8], s[8][8][8][8];
int n;
const LL MAX = 0x7fffffff;

int D(int x)
{
  return x*x;
}

int fun(int k, int x1, int y1, int x2, int y2)
{
  if (d[k][x1][y1][x2][y2] != MAX)
    {
      return d[k][x1][y1][x2][y2];
    }
  if (k == 0)
    {
      LL res = D(s[x1][y1][x2][y2]);
      d[k][x1][y1][x2][y2] = res;
      return res;
    }

  LL res = d[k][x1][y1][x2][y2];

  for (int a = 0; a < 7; a++)
    {
      LL tmp1 = D(s[x1][y1][a][y2]) + fun(k - 1, a + 1, y1, x2, y2);
      LL tmp2 = fun(k - 1, x1, y1, a, y2) + D(s[a+1][y1][x2][y2]);
      res = min(min(tmp1, tmp2), res);
    }

  for (int a = 0; a < 7; a++)
    {
      LL tmp1 = D(s[x1][y1][x2][a]) + fun(k - 1, x1, a + 1, x2, y2);
      LL tmp2 = fun(k - 1, x1, y1, x2, a) + D(s[x1][a+1][x2][y2]);
      res = min(res, min(tmp1, tmp2));
    }

  d[k][x1][y1][x2][y2] = res;
  return res;
}

int main(void)
{

  #ifdef DEBUG
  freopen("poj1191.in", "r", stdin);
  #endif

  while (cin >> n)
    {
      for(int i = 0; i < 15; i++)
        {
          for (int x1 = 0; x1 < 8; x1++)
            for (int y1 = 0; y1 < 8; y1++)
              for (int x2 = 0; x2 < 8; x2++)
                for (int y2 = 0; y2 < 8; y2++)
                  d[i][x1][y1][x2][y2] = MAX;
        }
      double sum = 0;

      for (int i = 0; i < 8; i++)
        {
          for (int j = 0; j < 8; j++)
            {
              cin >> a[i][j];
              sum += a[i][j];
            }
        }

      sum /= n;

      for (int x1 = 0; x1 < 8; x1++)
        {
          for (int y1 = 0; y1 < 8; y1++)
            {
              for (int x2 = x1; x2 < 8; x2++)
                {
                  for (int y2 = y1; y2 < 8; y2++)
                    {
                      s[x1][y1][x2][y2] = 0;
                      for (int i = x1; i <= x2; i++)
                        {
                          for (int j = y1; j <= y2; j++)
                            {
                              s[x1][y1][x2][y2] += a[i][j];
                            }
                        }
                    }
                }
            }
        }

      double res = fun(n - 1, 0, 0, 7, 7);
      res = sqrt(res / n - sum * sum);
      printf("%.3f\n", res);
    }

  return 0;
}
```

重构、精简代码：

```cpp
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <cstdlib>

using namespace std;

typedef long long LL;
const int X = 10;
LL a[X][X], d[15][X][X][X][X], r[X][X];
int vis[15][X][X][X][X];
int n;
const LL MAX = 0x7fffffff;

template<typename T>
T D(T x) {return x * x;}

LL area(int x1, int y1, int x2, int y2) {
  return r[x2][y2] + r[x1-1][y1-1] - r[x1-1][y2] - r[x2][y1-1];
}

int fun(int k, int x1, int y1, int x2, int y2)
{
  if (vis[k][x1][y1][x2][y2])
      return d[k][x1][y1][x2][y2];

  if (k == 0)
    {
      LL res = D<LL>(area(x1, y1, x2, y2));
      d[k][x1][y1][x2][y2] = res;
      vis[k][x1][y1][x2][y2] = 1;
      return res;
    }

  LL &res = d[k][x1][y1][x2][y2];
  res = MAX;

  for (int a = 1; a <= 7; a++)
    {
      LL tmp1 = fun(0, x1, y1, a, y2) + fun(k - 1, a + 1, y1, x2, y2);
      LL tmp2 = fun(k - 1, x1, y1, a, y2) + fun(0, a+1, y1, x2, y2);
      res = min(min(tmp1, tmp2), res);
    }

  for (int a = 1; a <= 7; a++)
    {
      LL tmp1 = fun(0, x1, y1, x2, a) + fun(k - 1, x1, a + 1, x2, y2);
      LL tmp2 = fun(k - 1, x1, y1, x2, a) + fun(0, x1, a+1, x2, y2);
      res = min(res, min(tmp1, tmp2));
    }
  vis[k][x1][y1][x2][y2] = 1;
  return res;
}

int main(void)
{

  #ifdef DEBUG
  freopen("poj1191.in", "r", stdin);
  #endif

  cin >> n;
  double sum = 0;

  for (int i = 1; i <= 8; i++)
    for (int j = 1; j <= 8; j++) {
      cin >> a[i][j];
      sum += a[i][j];
    }
  sum /= n;
  for (int i = 1; i <= 8; i++)
    for (int j = 1; j <= 8; j++)
      r[i][j] = a[i][j] + r[i-1][j] + r[i][j-1] - r[i-1][j-1];

  double res = fun(n - 1, 1, 1, 8, 8);
  res = sqrt(res / n - sum * sum);
  printf("%.3f\n", res);

  return 0;
}
```

[poj1191.cpp](/assets/src/poj1191.cpp)

发现 POJ 上一个有意思的坑：

1. 使用`G++`提交的时候，必须使用`%.3f`，不能使用`%.3lf`
2. 使用`C++`提交的时候，两种方式都可以

以后还是用`C++`来交题吧。


#### TODO
使用自底向上的递推的方法做一遍。

仔细想了一下递推顺序，没有还是没有想清楚应该怎么处理。
